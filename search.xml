<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些找工作或实习的渠道</title>
      <link href="/2024/11/13/job/"/>
      <url>/2024/11/13/job/</url>
      
        <content type="html"><![CDATA[<p>Boss直聘</p><p>offershow</p><p>github上查找</p><p>linkedin</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>青训营直播总结</title>
      <link href="/2024/11/13/Dance_live/"/>
      <url>/2024/11/13/Dance_live/</url>
      
        <content type="html"><![CDATA[<p>听了前端文杰老哥分享</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>计算机基础很重要必须要持续学习： 例如：计算机原理，操作系统等，在工作中有些人问题你需要定位到它的问题出在了那里，这个问题的对应着是哪个方面的问题<br>学习ai提示词，提高学习效率，练好基本功，多写代码，多用大模型 前期多学习如何编码而不是太多关于工程化的问题</p><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><p>解决问题:事实是，就业环境中大概率没人把你当学生般保护着，别人没有义务要解决你的问题(不合理，不科学)，请务必提升自己解决问题的能力。</p><p>学习:工作中，很难找到手把手教你做事的团队，多数时候都是靠自学，没有课本，没有老师，没有标准答案，全凭自己，所以务必提升独立学习能力;</p><p>二极化:世界不是非黑即白，代码也是，职业也是，接受、包容多样性吧，多从不同角度思考问题，从不同渠道了解解决问题的方法，学会更体系化地思考;</p><p>LLM:非常值得花很多时间学习，用好这个工具，提升你个人效率;但它不是魔法，不要幻想着学会了就能怎么这么样; (目前只停留在问题的复制粘贴 效率很低)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言进阶</title>
      <link href="/2024/11/11/Go_Advanced/"/>
      <url>/2024/11/11/Go_Advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="字节青训营学习"><a href="#字节青训营学习" class="headerlink" title="字节青训营学习"></a>字节青训营学习</h1><h3 id="一-入门篇学习"><a href="#一-入门篇学习" class="headerlink" title="一.入门篇学习"></a>一.入门篇学习</h3><p>实战篇：</p><h4 id="1-猜数字游戏"><a href="#1-猜数字游戏" class="headerlink" title="1.猜数字游戏"></a>1.猜数字游戏</h4><p>运用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">”math/rand“</span><br><span class="line"></span><br><span class="line">maxNum := 100</span><br><span class="line">调用 Intn（maxNum）</span><br><span class="line">//注意这并不能使每一次都用都产生不同的值</span><br><span class="line"></span><br><span class="line">需要加 时间戳 才能每次产生不同的值</span><br><span class="line">应该是：</span><br><span class="line">maxNum := 100</span><br><span class="line">ran.Seed(time.Now().UnixNano())</span><br><span class="line">然后调用</span><br><span class="line"> ran.Intn（maxNum）</span><br><span class="line"> </span><br><span class="line"> 用 &quot;bufio&quot;</span><br><span class="line"> 这个特别的包以后可以用到</span><br><span class="line"> </span><br><span class="line"> 这里读取一行输入用的是</span><br><span class="line"> reader := bufo.NewReader(os.Stdin)//调用这个可以更加灵活</span><br><span class="line"> input， err := reader.ReadString(&#x27;\n&#x27;)</span><br><span class="line"> if err != nil&#123;...&#125;</span><br><span class="line"> </span><br><span class="line"> input = strings.TrimSuffix(intput,&quot;\n&quot;)//去掉换行符</span><br><span class="line"> </span><br><span class="line"> guess,err := strconv.Atoi(input)//转换成数字</span><br><span class="line"> </span><br><span class="line"> 菜值逻辑 </span><br></pre></td></tr></table></figure><h4 id="2-在线词典介绍"><a href="#2-在线词典介绍" class="headerlink" title="2.在线词典介绍"></a>2.在线词典介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run simpledict/v4/main.go hello</span><br><span class="line">//意思是查询hello这个功能</span><br><span class="line">//会输出以下内容</span><br><span class="line">hello UK:[&#x27;he&#x27;lau]US:[ha&#x27;lo]</span><br><span class="line">int.喂；哈罗</span><br><span class="line">n.引人注意的呼声</span><br><span class="line">V.向人呼（喂</span><br><span class="line"></span><br><span class="line">调用第三方api</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成请求</p><p><a href="https://curlconverter.com/">https://curlconverter.com/</a></p><p>写入curl 自动生成代码</p><p>示例：</p><p><img src="/study_photo/39.png" alt="image-20241104201754858"></p><p>会输出一些列bilibili的东西</p><p>json序列化</p><p><img src="/study_photo/40.png" alt="image-20241104202957339"></p><p>衍生出以下</p><p><img src="/study_photo/41.png" alt="image-20241104203014855"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request ：= DicRequest&#123;Trans Type：&quot;en2zh&quot;,Source:&quot;good&quot;&#125;</span><br><span class="line">buf, err := json.Marshal(request)//序列化request 变成byte数组</span><br><span class="line">if~~~</span><br><span class="line">var data = bytes.NewReader(buf) //因为buf返回的是bytes数组所以我们应该 bytes.NewReader</span><br></pre></td></tr></table></figure><p>解析response 进行反序列化</p><p>json转golang 结构体</p><p><a href="https://oktools.net/json2go">https://oktools.net/json2go</a></p><p>反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = json.Unmarshal(bodytext,&amp;dictResponse)//传入结构体</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;%#v&quot;,dicResponse)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Go进阶"><a href="#Go进阶" class="headerlink" title="Go进阶"></a>Go进阶</h3><h4 id="1-并发编程"><a href="#1-并发编程" class="headerlink" title="1.并发编程"></a>1.并发编程</h4><p>并发：多线程在一个核运行 时间碎片</p><p>并行： 多核</p><p><img src="/study_photo/42.png" alt="image-20241109132249854"></p><p>并行是并发的手段</p><h4 id="2-协程"><a href="#2-协程" class="headerlink" title="2.协程"></a>2.协程</h4><p><img src="/study_photo/43.png" alt="image-20241109132406297"></p><p>协程：轻量级线程 线程本身重量级 Goroutine：可以实现上万个携程</p><p>例子:协程</p><p><img src="/study_photo/44.png" alt="image-20241109132554426"></p><p>go关键字开启协程</p><p>通过通信来共享内存</p><p><img src="/study_photo/45.png" alt="image-20241109132746410"></p><p>channel</p><p>make创建channel</p><p><img src="/study_photo/46.png" alt="image-20241109132925436"></p><p>有缓冲：</p><p>无缓冲：进行通信时（两个goroutine同步）也称同步通道</p><p>示例：</p><p><img src="/study_photo/47.png" alt="image-20241109133236164"></p><p>先make创建通道 把数字放入第一个通道里</p><p>然后b把src做平方运算</p><p>并发安全 Lock</p><p><img src="/study_photo/48.png" alt="image-20241109134052647"></p><p>Lock（）临界区</p><p><img src="/study_photo/49.png" alt="image-20241109134621688"></p><h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3.依赖管理"></a>3.依赖管理</h4><p>1.GOPATH</p><p>bin pkg src（项目源码）</p><p>无法实现package 的多版本控制</p><p>2.vendor存放依赖副本 也有弊端</p><p>3.go module 管理 解决了问题</p><p><img src="/study_photo/51.png" alt="image-20241109135629389"></p><p>indirect关键词</p><p><img src="/study_photo/52.png" alt="image-20241109140344112"></p><p>b（选择最低兼容版本）</p><h4 id="4-依赖分发"><a href="#4-依赖分发" class="headerlink" title="4.依赖分发"></a>4.依赖分发</h4><p>Github         SVN               …</p><p>​          Developer</p><p>无法保证构建稳定性</p><p>无法保证依赖可用性</p><p>增加第三方压力</p><p>Go proxy （）缓存内容版本 从proxy拉取依赖 减少第三方压力</p><p>Proxy1 -》 proxy2 -》 Direct  依次进行</p><h4 id="5-工具-go-get"><a href="#5-工具-go-get" class="headerlink" title="5.工具 go get"></a>5.工具 go get</h4><p>go mod       <strong>init tidy download</strong></p><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p>事故：</p><p><img src="/study_photo/59.png" alt="image-20241111092419264"></p><p>测试的重要性：避免事故的最后一道屏障</p><p>单元测试 mock测试   回归测试 集成测试</p><h5 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h5><p><img src="/study_photo/60.png" alt="image-20241111092633595"></p><p>保证代码整体覆盖率</p><p>提升效率</p><h5 id="2-规则"><a href="#2-规则" class="headerlink" title="2. 规则"></a>2. 规则</h5><p><img src="/study_photo/61.png" alt="image-20241111092852792"></p><h5 id="3例子："><a href="#3例子：" class="headerlink" title="3例子："></a>3例子：</h5><p><img src="/study_photo/62.png" alt="image-20241111093035601"></p><p>go test 【flags】 【packages】</p><h5 id="4-assert"><a href="#4-assert" class="headerlink" title="4.assert"></a>4.assert</h5><p><img src="/study_photo/63.png" alt="image-20241111093202556"></p><h5 id="5-覆盖率"><a href="#5-覆盖率" class="headerlink" title="5.覆盖率"></a>5.覆盖率</h5><p><img src="/study_photo/64.png" alt="image-20241111093237237"></p><p><img src="/study_photo/65.png" alt="image-20241111093252039"></p><p>提升覆盖率</p><p><img src="/study_photo/66.png" alt="image-20241111093436343"></p><p>对各个分支测试 使函数代码都经过完备的测试 提升覆盖率 减少事故</p><p><img src="/study_photo/67.png" alt="image-20241111093526971"></p><h5 id="6-依赖"><a href="#6-依赖" class="headerlink" title="6.依赖"></a>6.依赖</h5><p><img src="/study_photo/68.png" alt="image-20241111093723869"></p><h5 id="7-文件处理"><a href="#7-文件处理" class="headerlink" title="7.文件处理"></a>7.文件处理</h5><p><img src="/study_photo/69.png" alt="image-20241111093855592"></p><p>一旦文件被别人篡改 在特定场景下就无法运行！</p><h5 id="8-Mock"><a href="#8-Mock" class="headerlink" title="8.Mock"></a>8.Mock</h5><p><img src="/study_photo/70.png" alt="image-20241111094015817"></p><p>replacement 打桩函数</p><p><img src="/study_photo/71.png" alt="image-20241111094459861"></p><p>通过mock 不对 文件有强依&#x2F;study_photo&#x2F;70.png</p><p><img src="/study_photo/72.png" alt="image-20241111094758462"></p><p>优化：</p><p><img src="/study_photo/73.png" alt="image-20241111094944759"></p><p>fastrand</p><h4 id="10-项目实践"><a href="#10-项目实践" class="headerlink" title="10.项目实践"></a>10.项目实践</h4><p><img src="/study_photo/75.png" alt="image-20241111095222107"></p><p><img src="/study_photo/76.png" alt="image-20241111095416063"></p><p><img src="/study_photo/77.png" alt="image-20241111095526585"></p><p><img src="/study_photo/78.png" alt="image-20241111100016448"></p><p>话题id -》 获取所有post</p><p><img src="/study_photo/79.png" alt="image-20241111100134049"></p><p><img src="/study_photo/80.png" alt="image-20241111100208797"></p><p>初始化话题内存索引</p><p><img src="/study_photo/81.png" alt="image-20241111100306256"></p><hr><p>逻辑层：</p><p><img src="/study_photo/82.png" alt="image-20241111100415573"></p><p><img src="/study_photo/83.png" alt="image-20241111121526603"></p><p><img src="/study_photo/83.png" alt="image-20241111121719613"></p><p>并行处理</p><p><img src="/study_photo/84.png" alt="image-20241111121901723"></p><p><img src="/study_photo/85.png" alt="image-20241111122045428"></p><h3 id="三-高质量编程与实践"><a href="#三-高质量编程与实践" class="headerlink" title="三.高质量编程与实践"></a>三.高质量编程与实践</h3><p>如何编写更简洁和跟清晰的代码</p><p>熟悉GO程序性能分析工具</p><p>常用Go语言程序优化手段</p><p>了解工程性能优化的原则和流程</p><p>:性能调优    性能分析工具     性能调优案例</p><p>算法效率</p><h4 id="1-高质量编程"><a href="#1-高质量编程" class="headerlink" title="1.高质量编程"></a>1.高质量编程</h4><p>正确可靠 简洁清晰</p><p>各种边界条件是否考虑完备</p><p>异常情况处理 稳定性保证</p><p>易读易维护</p><p>团队合作保证容易读 维护 使其增加和调整更加快速 更加清晰</p><p>主要是给人看 让人可以看懂  对已有的功能改善 优化 容易添加功能</p><h4 id="2-编码规范"><a href="#2-编码规范" class="headerlink" title="2.编码规范"></a>2.编码规范</h4><p>代码格式</p><p>注释</p><p>命名规范</p><p>控制流程</p><p>错误和异常处理</p><p><img src="/study_photo/87.png" alt="image-20241112171014037"></p><p>不需要注释实现接口的方法 这种注释可以删除</p><p><img src="/study_photo/88.png" alt="image-20241112171126665"></p><h5 id="1-gofmt"><a href="#1-gofmt" class="headerlink" title="1.gofmt"></a>1.gofmt</h5><p>推荐使用gofmt 自动格式化代码为官方统一风格</p><h5 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h5><p>注释应该解释代码的作用</p><p>注释应该解释代码如何做的</p><p>注释应该解释代码实现的原因</p><p>注释应该解释代码什么情况会错</p><p><img src="/study_photo/89.png" alt="image-20241112171511567"></p><p>下面的根本不需要注释没有什么必要 函数名字已经说明了</p><p><img src="/study_photo/90.png" alt="image-20241112171655993"></p><p>最后一条语句是很难理解的  如果没有注释   一定要会看英文呵呵</p><p><img src="/study_photo/91.png" alt="image-20241112171909248"></p><p><img src="/study_photo/92.png" alt="image-20241112172349471"></p><p><img src="/study_photo/93.png" alt="image-20241112172623038"></p><p><img src="/study_photo/94.png" alt="image-20241112172638016"></p><p>此时的t就减少了很多东西</p><p><img src="/study_photo/95.png" alt="image-20241112172953450"></p><p>例如http中调用 Server 是 http.Server</p><p>若用 ServerHTTP   http.ServerHTTP这样感觉就变得冗余了没有必要</p><p><img src="/study_photo/96.png" alt="image-20241112173231246"></p><p>避免if else嵌套 包含同样语句可以去掉 重复语句</p><p><img src="/study_photo/97.png" alt="image-20241112173423686"></p><p>这样看起来比较复杂</p><p><img src="/study_photo/98.png" alt="image-20241112173532576"></p><p>调整后：</p><p><img src="/study_photo/99.png" alt="image-20241112173605956"></p><p>控制流程 ： 线性原理 尽量走直线 避免复杂的嵌套分支</p><h5 id="3-错误和异常处理"><a href="#3-错误和异常处理" class="headerlink" title="3.错误和异常处理"></a>3.错误和异常处理</h5><p><img src="/study_photo/100.png" alt="image-20241112173840011"></p><p><img src="/study_photo/101.png" alt="image-20241112173902743"></p><p><img src="/study_photo/102.png" alt="image-20241112174134842"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目学习</title>
      <link href="/2024/11/09/Simple_bank/"/>
      <url>/2024/11/09/Simple_bank/</url>
      
        <content type="html"><![CDATA[<h1 id="重新开启simplebank学习！！！"><a href="#重新开启simplebank学习！！！" class="headerlink" title="重新开启simplebank学习！！！"></a>重新开启simplebank学习！！！</h1><h3 id="一-创建数据库表"><a href="#一-创建数据库表" class="headerlink" title="一.创建数据库表"></a>一.创建数据库表</h3><p><a href="https://dbdiagram.io/">https://dbdiagram.io</a> 可视化数据库工具</p><h4 id="1-创建账户表"><a href="#1-创建账户表" class="headerlink" title="1.创建账户表"></a>1.创建账户表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table accounts as A &#123; <span class="comment">//A作为account的别名</span></span><br><span class="line">  id bigserisal [pk]  <span class="comment">//pk作为主键 自增的id列</span></span><br><span class="line">  owner varchar</span><br><span class="line">  balance bigint</span><br><span class="line">  currency varchar </span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//自动获取时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建条目表"><a href="#2-创建条目表" class="headerlink" title="2.创建条目表"></a>2.创建条目表</h4><p>&#x2F;&#x2F;记录账户余额的变化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk] <span class="comment">//</span></span><br><span class="line">  account_id bigint [ref : &gt; A.id] <span class="comment">//外键 账户和条目之间是1对多关系</span></span><br><span class="line">    amount bigint [not null note:<span class="string">`可以是负或者正`</span>] <span class="comment">//正负取决于取出还是存入 note是添加注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//记录条目的创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建-转账表"><a href="#3-创建-转账表" class="headerlink" title="3.创建 转账表"></a>3.创建 转账表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">    amount  bigint [not null note: <span class="string">`一定不能为空`</span>]<span class="comment">//note为注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此之后向列中添加非空约束 例如 ：</p><p>balance bigint [not null] &#x2F;&#x2F;  <strong>非空约束是一种用于限制数据库表中某列不能为空的约束</strong></p><p>枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enum Currency&#123;</span><br><span class="line">USD</span><br><span class="line">EUR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向表中添加索引</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use DBML to define your database structure</span></span><br><span class="line"><span class="comment">// Docs: https://dbml.dbdiagram.io/docs</span></span><br><span class="line"></span><br><span class="line">Table accounts as A &#123;</span><br><span class="line">  id bigserisal [pk]</span><br><span class="line">  owner varchar [not null]</span><br><span class="line">  balance bigint [not null]</span><br><span class="line">  currency varchar  [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    owner</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  account_id bigint [ref : &gt; A.id] </span><br><span class="line">  </span><br><span class="line">  amount bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//列出特定账户的所有条目</span></span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  amount  bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些做好之后使用导出功能 生成代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserisal PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将外键添加到表中</span></span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二-Docker"><a href="#二-Docker" class="headerlink" title="二.Docker"></a>二.Docker</h3><p><strong>用指令创建容器的时候 一定要注意-p参数 将容器的端口映射到主机上 一定要保证端口不要被占用 否则将会产生问题</strong></p><p>拉取镜像语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>开始一个容器指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.docker run --name &lt;container_name&gt; -e &lt;environment_variable&gt; -d &lt;image&gt;:tag</span><br><span class="line">:</span><br><span class="line">2.docker run --name some-postgres -e POSTGRES_PASSWORD=mysecret -d postgres </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！！！端口映射 -p 5432:5432 //注意防止端口冲突自行更改</span></span><br><span class="line">示例：</span><br><span class="line">docker run --name postgres12 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine </span><br><span class="line"></span><br><span class="line">3. docker exec -it &lt;contain_name_or_id&gt; &lt;comman&gt; [args]</span><br><span class="line">示例：#进入psql控制台</span><br><span class="line">docker exec -it postgres12 psql -U root</span><br><span class="line"></span><br><span class="line">4.显示容器日志</span><br><span class="line">docker logs &lt;container_name_or_id&gt;</span><br><span class="line">示例:</span><br><span class="line">docker logs postgres12</span><br><span class="line"></span><br><span class="line">5.连接shell</span><br><span class="line">指令：</span><br><span class="line">docker exec -it postgres12 /bin/sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建新的数据库</span></span><br><span class="line">createdb --username=root --owner=root simple_bank</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用psql连接</span></span><br><span class="line"> psql simple_bank</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">删除数据库</span></span><br><span class="line"> dropdb [名称]</span><br><span class="line"> </span><br><span class="line"> exit退出shell</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">指令结合</span></span><br><span class="line"> docker exec -it postgres12 createdb --username=root --owner=root simple_bank</span><br><span class="line"> docker exec -it postgres12 psql -U root simple_bank</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查找指令</span></span><br><span class="line"> history | grep &quot;docker run&quot; //linux</span><br><span class="line"> history | Select-String &quot;docker run&quot;//windows</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>区分 docker中的 镜像和容器</p><p>docker image中包含多个运行 容器的应用实例 类似结构：</p><p>- docker image</p><ul><li>├── container1</li></ul><ul><li><p>├──container2</p></li><li><p>├──container3</p></li></ul><h3 id="三-Tableplus"><a href="#三-Tableplus" class="headerlink" title="三.Tableplus"></a>三.Tableplus</h3><p>将sql文件导入到tableplus中</p><p>在tableplus中删除表 使用sql指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> accounts CASCADE; <span class="operator">/</span><span class="operator">/</span>注意替换表名称</span><br></pre></td></tr></table></figure><h3 id="四-DB-migration"><a href="#四-DB-migration" class="headerlink" title="四.DB migration"></a>四.DB migration</h3><p>迁移指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq init_schema</span><br></pre></td></tr></table></figure><p>up&#x2F;down migration：理解迁移 类比栈结构 向上新数据表 向下 旧数据表</p><p><strong>使用migrate up指令时         Old DB 在文件中 一次按照 1.up.sql 2.up.sql 3.up.sql 依次运行到New DB</strong></p><p><strong>使用migrate down指令时  New DB 在文件中依次按照 3.up.sql 2.up.sql  1.up.sql 依次运行到Old DB</strong></p><p><strong>old DB schema</strong> —–&gt; migrate up —––&gt; x.up.sql —–&gt;<strong>New DB schema</strong></p><p>​      &lt;—————————-  x.down.sql &lt;———migrate down&lt;————-</p><p>将最开始的.sql文件放入 .up.sql中</p><h3 id="五-Makefile文件"><a href="#五-Makefile文件" class="headerlink" title="五.Makefile文件"></a>五.Makefile文件</h3><p><strong>创建规则后使用  make指令 快速创建</strong></p><p>如果你是萌新开始给到你一个项目 你可以通过makefile文件快速构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">migrate -help</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过看日志 知道使用什么指令来工作</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">迁移指令</span></span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank&quot; -verbose up</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现ssl错误</span></span><br><span class="line">添加sslmode=disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现了一系列的迁移错误   解决方案</span></span><br><span class="line">强制更改版本</span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; -verbose force 1</span><br></pre></td></tr></table></figure><h3 id="六-数据库的CRUD"><a href="#六-数据库的CRUD" class="headerlink" title="六.数据库的CRUD"></a>六.数据库的CRUD</h3><p>DATAVASE&#x2F;SQL库</p><p>GORM</p><p>sqlx（兼容多）</p><p>sqlc（最好的 融合了以上两者的优点）</p><h3 id="七-使用sqlc"><a href="#七-使用sqlc" class="headerlink" title="七.使用sqlc"></a>七.使用sqlc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlc init</span><br></pre></td></tr></table></figure><p>介绍:</p><p>sqlc 从 SQL 生成<strong>类型安全的代码</strong>。以下是它的工作原理：</p><ol><li>您使用 SQL 编写查询。</li><li>运行 sqlc 来生成具有这些查询的类型安全接口的代码。</li><li>编写调用生成的代码的应用程序代码。</li></ol><p>查看<a href="https://play.sqlc.dev/">一个交互式示例</a>来了解它的实际应用，以及 sqlc 背后的动机的<a href="https://conroy.org/introducing-sqlc">介绍性博客文章</a>。</p><h3 id="八-sqlc-yaml"><a href="#八-sqlc-yaml" class="headerlink" title="八.sqlc.yaml"></a>八.sqlc.yaml</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line">sql:</span><br><span class="line">- schema: <span class="string">&quot;simplebank/db/migration&quot;</span> <span class="comment">//数据库表</span></span><br><span class="line">  queries: <span class="string">&quot;db/query&quot;</span> <span class="comment">//数据库查询 首先要编写数据库查询</span></span><br><span class="line">  engine: <span class="string">&quot;postgresql&quot;</span> <span class="comment">//使用的数据库</span></span><br><span class="line">  gen:</span><br><span class="line">    <span class="keyword">go</span>: </span><br><span class="line">      <span class="keyword">package</span>: <span class="string">&quot;db&quot;</span></span><br><span class="line">      out: <span class="string">&quot;simplebank/db/sqlc&quot;</span></span><br><span class="line">      sql_package: <span class="string">&quot;pgx/v5&quot;</span></span><br><span class="line">      emit_json_tags: <span class="literal">true</span></span><br><span class="line">      emit_interface: <span class="literal">false</span></span><br><span class="line">      emit_empty_slices: <span class="literal">true</span></span><br><span class="line">      overrides:</span><br><span class="line">        - db_type: <span class="string">&quot;timestamptz&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;time.Time&quot;</span></span><br><span class="line">        - db_type: <span class="string">&quot;uuid&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;github.com/google/uuid.UUID&quot;</span></span><br></pre></td></tr></table></figure><p>account.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: CreateAccount :one</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts (</span><br><span class="line">  owner,</span><br><span class="line">  balance,</span><br><span class="line">  currency</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">  $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span></span><br><span class="line">) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><h4 id="make-sqlc-生成代码"><a href="#make-sqlc-生成代码" class="headerlink" title="make sqlc 生成代码"></a>make sqlc 生成代码</h4><h5 id="1-account-sql-go"><a href="#1-account-sql-go" class="headerlink" title="1.account.sql.go"></a>1.account.sql.go</h5><h5 id="2-db-go"><a href="#2-db-go" class="headerlink" title="2.db.go"></a>2.db.go</h5><h5 id="3-models-go"><a href="#3-models-go" class="headerlink" title="3.models.go"></a>3.models.go</h5><p><strong>在生成之后由于没有 初始化项目 使得项目报红</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init project/simplebank</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="九-编写单元测试用例"><a href="#九-编写单元测试用例" class="headerlink" title="九.编写单元测试用例"></a>九.编写单元测试用例</h3><p>1.导入未使用的包在前面添加_可以防止系统自动将它删除</p><p>例如：</p><p>_ “github.com&#x2F;lib&#x2F;pq “</p><p>错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec)</span><br><span class="line">have Exec(string, ...any) (sql.Result, error)</span><br><span class="line">want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span><br><span class="line"></span><br><span class="line">        你遇到的错误信息表明，你尝试将 *sql.DB 类型的 conn 变量用作 DBTX 类型的参数，但 *sql.DB 并不满足 DBTX 接口的要求。具体来说，DBTX 接口期望的 Exec 方法签名是 (context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag, error)，而 *sql.DB 提供的 Exec 方法签名是 (string, ...any) (sql.Result, error)。</span><br></pre></td></tr></table></figure><p><strong>目前不理解  方法和接口 开始学习</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是接口</span></span><br><span class="line"><span class="keyword">type</span> DBTX <span class="keyword">interface</span> &#123;</span><br><span class="line">Exec(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgconn.CommandTag, <span class="type">error</span>)</span><br><span class="line">Query(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgx.Rows, <span class="type">error</span>)</span><br><span class="line">QueryRow(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) pgx.Row</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;<span class="comment">//的含义这是可变参数的声明方式。它表示可以接收零个或多个任意类型的参数。在函数内部，这些参数被视为一个 []interface&#123;&#125;（一个接口类型的切片）。</span></span><br><span class="line">例如，如果有一个函数接受一个字符串和任意数量的其他参数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">(s <span class="type">string</span>, args...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以这样调用这个函数：</span><br><span class="line">myFunction(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 在这段代码中有一个这样的错误我不知道怎么修改cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec) have Exec(string, ...any) (sql.Result, error) want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要解决这个问题，你需要确保你的 DBTX 接口的方法签名与 *sql.DB 的实现匹配。具体来说，你需要修改 DBTX 接口的 Exec 方法，使其接受 context.Context 参数。以下是一个可能的解决方案：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修改 DBTX 接口，使其 Exec 方法的签名为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBTX interface &#123;</span></span><br><span class="line"><span class="comment">    Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error)</span></span><br><span class="line"><span class="comment">    // 其他方法...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">在你的 New 函数中，确保它接受符合 DBTX 接口的类型。例如，使用 sql.DB 时，你可以创建一个适配器来实现 DBTX 接口。</span></span><br><span class="line"><span class="comment">这里是一个适配器示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBAdapter struct &#123;</span></span><br><span class="line"><span class="comment">    *sql.DB</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func (db *DBAdapter) Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error) &#123;</span></span><br><span class="line"><span class="comment">    result, err := db.DB.ExecContext(ctx, query, args...)</span></span><br><span class="line"><span class="comment">    return result, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">然后在 TestMain 中使用这个适配器：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">testQueries = New(&amp;DBAdapter&#123;conn&#125;)</span></span><br><span class="line"><span class="comment">这样就能确保 *sql.DB 能正确实现 DBTX 接口，从而解决你遇到的错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!gpt给出解决问题的方法在我不知道用pgx的情况下 gpt给出用pgx连接</span><br><span class="line">给gpt看完接口定义之后</span><br><span class="line">由于你的 DBTX 接口使用了 pgx 库，你可以使用 pgx 的 Conn 类型而不是 *sql.DB。这里是一个简单的解决方案：</span><br><span class="line">使用 pgx 连接：确保在代码中使用 pgx 的连接，而不是 *sql.DB。修改你的数据库连接部分：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dbDriver = <span class="string">&quot;pgx&quot;</span></span><br><span class="line">dbSource = <span class="string">&quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">conn, err := pgx.Connect(context.Background(), dbSource)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">testQueries = New(conn) <span class="comment">// 确保 New 函数接收 pgx.Conn</span></span><br><span class="line"></span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line">确保 New 函数接受 pgx.Conn：在你的 New 函数中，确保它接受 pgx.Conn 而不是 *sql.DB。</span><br><span class="line">这样，你的 DBTX 接口与 pgx 的连接就能正常工作，避免了类型不匹配的问题。这样也简化了代码，直接使用了 pgx 连接而不需要适配器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="10-8日-解决目前为止遇见的一个问题"><a href="#10-8日-解决目前为止遇见的一个问题" class="headerlink" title="10.8日 解决目前为止遇见的一个问题"></a>10.8日 解决目前为止遇见的一个问题</h4><p><em>遇见的第一个大问题 在account_test.go中和main_test.go中出现的一些问题</em></p><p>*和姐聊了一下 解决了 **testQueries &#x3D; New(conn)*<em>中的问题</em></p><p><em>main_test.go使用 pgx来连接数据库 而不是视频中讲解的sql.open 他们的返回值类型不同造成了错误</em></p><p>测试函数的拼写错误 可能也影响了一大部分</p><p>还有最后一处问题</p><ol><li><code>require.NotEmpty(t, err)</code>这一行存在问题。这里应该是检查<code>account</code>是否不为空，而不是检查错误<code>err</code>是否不为空。正确的应该是<code>require.NotEmpty(t, account)</code>。</li></ol><p>不熟悉的地方go语言的包 接口 方法</p><hr><h4 id="1-最终的account-test-go代码"><a href="#1-最终的account-test-go代码" class="headerlink" title="1.最终的account_test.go代码"></a>1.最终的account_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    <span class="string">&quot;xiaozhao&quot;</span>,</span><br><span class="line">Balance:  <span class="number">100</span>,</span><br><span class="line">Currency: <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-最终的main-test-go代码"><a href="#2-最终的main-test-go代码" class="headerlink" title="2.最终的main_test.go代码"></a>2.最终的main_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">DATABASE_URL = <span class="string">&quot;postgres://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">conn, err := pgx.Connect(context.Background(), DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Unable to connect to database: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(context.Background())</span><br><span class="line"></span><br><span class="line">testQueries = New(conn)</span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试通过！！！！！！！</span></span><br></pre></td></tr></table></figure><p><strong>上面是指定了一个一个账户 我们想让账户的主人 货币 钱是随机的 编写util中的random代码</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rng *rand.Rand</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    source := rand.NewSource(time.Now().UnixNano())</span><br><span class="line">    rng = rand.New(source)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个介于 min max 之间的随机的 int64 数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomInt</span><span class="params">(min, max <span class="type">int64</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> min + rng.Int63n(max-min+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 n 个字符的随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sb strings.Builder</span><br><span class="line">    k := <span class="built_in">len</span>(alphabet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        c := alphabet[rng.Intn(k)]</span><br><span class="line">        sb.WriteByte(c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成owner</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomOwner</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomString(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成钱的数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomMoney</span><span class="params">()</span></span> <span class="type">int64</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomInt(<span class="number">0</span>,<span class="number">1000</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机产生一种货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandowCurrency</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line">currencies := []<span class="type">string</span>&#123;<span class="string">&quot;RMB&quot;</span>,<span class="string">&quot;USD&quot;</span>,<span class="string">&quot;CAD&quot;</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(currencies)</span><br><span class="line"><span class="keyword">return</span> currencies[rand.Intn(n)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**学会如何把自己写的包导入到别的文件夹下  这个需要看go mod下的 module project&#x2F;simplebank  **</p><p><strong>把moudle中的包作为起始路径 导入到别的文件夹下  就是：”project&#x2F;simplebank&#x2F;util”</strong></p><p>ok 截止到 10.8日随机生成的数据生成功</p><hr><p><strong>问题2</strong></p><p>makefile文件中的下面这个指令</p><p><strong>test:</strong></p><p><strong>go test -v -cover .&#x2F;…     这个指令必须在当前目录下找到go的测试文件</strong></p><p><strong>就是go.mod文件应该和makefile保持在一起</strong>    解决方法在本地的go.mod文件夹下又创建了一个makefile 用来测试 make test</p><p>类型断言 interface代表为止类型 使用前需要 转换为具体类型   (从未知类型转为已知类型)</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var i interface&#123;&#125; = 2</span><br><span class="line">num1， ok ：= i.(int)//断言</span><br></pre></td></tr></table></figure><hr><h4 id="3-account-test-go代码："><a href="#3-account-test-go代码：" class="headerlink" title="3.account_test.go代码："></a>3.account_test.go代码：</h4><p>全部测试通过！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomAccount</span><span class="params">(t *testing.T)</span></span> Account &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    util.RandomOwner(),</span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, account1.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line">arg := UpdateAccountParams&#123;</span><br><span class="line">ID:      account1.ID,</span><br><span class="line">Balance: util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">account2, err := testQueries.UpdateAccount(context.Background(), arg)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDeleteAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">err := testQueries.DeleteAccount(context.Background(), account1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line">require.Error(t, err)</span><br><span class="line"><span class="comment">//require.EqualError(t, err, sql.ErrNoRows.Error())</span></span><br><span class="line">require.Empty(t, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lastAccount Account</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">lastAccount = createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line">arg := ListAccountsParams&#123;</span><br><span class="line">Owner:  lastAccount.Owner,</span><br><span class="line">Limit:  <span class="number">5</span>, <span class="comment">//返回五条记录</span></span><br><span class="line">Offset: <span class="number">0</span>, <span class="comment">//设置偏移量 返回后五条记录  这里出现了问题！！！！</span></span><br><span class="line">&#125;</span><br><span class="line">accounts, err := testQueries.ListAccounts(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, accounts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, account := <span class="keyword">range</span> accounts &#123;</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line">require.Equal(t, lastAccount.Owner, account.Owner)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4-entry-test-go"><a href="#4-entry-test-go" class="headerlink" title="4.entry_test.go"></a>4.entry_test.go</h4><p>条目上的account.id要和account表单上的di相对应</p><p><strong>问题</strong></p><p><strong>id为null</strong></p><p><em><strong>在 PostgreSQL 中，如果一个表的 <code>id</code> 字段没有设置为自增序列（如 <code>bigserial</code>），并且你在插入数据时没有显式地为 <code>id</code> 字段指定值，那么 <code>id</code> 字段的值将会是 <code>NULL</code>，除非该字段设置了默认值。</strong></em></p><p><strong>解决办法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个序列：首先，你需要创建一个序列，这个序列将用于生成 id 列的值。</span><br><span class="line">   <span class="keyword">CREATE</span> SEQUENCE entries_id_seq;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置序列的所有权：将序列与 id 列关联起来。</span><br><span class="line">   <span class="keyword">ALTER</span> SEQUENCE entries_id_seq OWNED <span class="keyword">BY</span> entries.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置 id 列的默认值为序列的下一个值：这样，每当你插入新行而没有指定 id 值时，PostgreSQL 会自动使用序列的下一个值。</span><br><span class="line">   <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> entries <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> id <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;entries_id_seq&#x27;</span>);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>4确保 <code>id</code> 列是主键</strong>：从你提供的信息来看，<code>id</code> 列已经是主键。确保这一点很重要，因为主键约束可以保证 <code>id</code> 列的值是唯一的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试：插入一条新记录，不指定 id 值，检查是否自动生成了 id。</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id, amount, created_at) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">100</span>, now());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> entries <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">4</span>; 删除特定行的指令</span><br></pre></td></tr></table></figure><p>创建账单成功！</p><p>但是只能生成一个数据？？？</p><p>我发现了输出的区别 Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestCreateEntry$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc</p><p>ok  project&#x2F;simplebank&#x2F;db&#x2F;sqlc(cached) 这是第二次输出        第一次输出没有cached字样 数据正确的加载到了数据库 但是这个带有cached的数据没有加载到数据库</p><p><strong>因为 cached 是因为两次的数据相同 所以才没有被加载到数据库 这个可能是随机数代码的问题</strong></p><hr><h4 id="5-transfer-test-go"><a href="#5-transfer-test-go" class="headerlink" title="5.transfer_test.go"></a>5.transfer_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomTransfer</span><span class="params">(t *testing.T, account1, account2 Account)</span></span> Transfer &#123;</span><br><span class="line">arg := createTransferParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account2.ID,</span><br><span class="line">Amount:        util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">transfer, err := testQueries.createTransfer(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.FromAccountID, transfer.FromAccountID)</span><br><span class="line">require.Equal(t, arg.ToAccountID, transfer.ToAccountID)</span><br><span class="line">require.Equal(t, arg.Amount, transfer.Amount)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, transfer.ID)</span><br><span class="line">require.NotZero(t, transfer.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> transfer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">transfer1 := createRandomTransfer(t, account1, account2)</span><br><span class="line"></span><br><span class="line">transfer2, err := testQueries.GetTransfer(context.Background(), transfer1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, transfer1.ID, transfer2.ID)</span><br><span class="line">require.Equal(t, transfer1.FromAccountID, transfer2.FromAccountID)</span><br><span class="line">require.Equal(t, transfer1.ToAccountID, transfer2.ToAccountID)</span><br><span class="line">require.Equal(t, transfer1.Amount, transfer2.Amount)</span><br><span class="line">require.WithinDuration(t, transfer1.CreatedAt.Time, transfer2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">createRandomTransfer(t, account2, account1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := ListTransfersParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account1.ID,</span><br><span class="line">Limit:         <span class="number">5</span>,</span><br><span class="line">Offset:        <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transfers, err := testQueries.ListTransfers(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Len(t, transfers, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, transfer := <span class="keyword">range</span> transfers &#123;</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line">require.True(t, transfer.FromAccountID == account1.ID || transfer.ToAccountID == account1.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十-db-transaction"><a href="#十-db-transaction" class="headerlink" title="十.db transaction"></a>十.db transaction</h3><p>BEGIN语句启动事务</p><p>成功 则更新数据库</p><p>失败 则回滚事务（保持原来的状态）</p><p>​</p><p>代码对不上了 决定先复制粘贴 学习数据库中的知识点</p><p><strong>先从config.go开始</strong></p><hr><h3 id="十一-config-go"><a href="#十一-config-go" class="headerlink" title="十一.config.go"></a>十一.config.go</h3><p><strong>使用viper</strong></p><p>创建app.env文件存储配置信息</p><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config stores all configuration of the application.</span></span><br><span class="line"><span class="comment">// The values are read by viper from a config file or environment variable.</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">DATABASE_URL <span class="type">string</span> <span class="string">`mapstructure:&quot;DATABASE_URL&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadConfig reads configuration from file or environment variables.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">(path <span class="type">string</span>)</span></span> (config Config, err <span class="type">error</span>) &#123;</span><br><span class="line">viper.AddConfigPath(path)</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;env&quot;</span>)</span><br><span class="line"></span><br><span class="line">viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">err = viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = viper.Unmarshal(&amp;config)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>使用接口来简化一些操作好好学接口</p><p>目前为止更正了大部分问题接着往下学。。。。</p><p><strong>store.test.go出现了大问题</strong></p><p><strong>报错：</strong></p><p>**Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc &gt;&gt; before: 1984 3906 — FAIL: TestTransferTx (0.03s)    e:\projects\simplebank\db\sqlc\store_test.go:83:         Error Trace:e:&#x2F;projects&#x2F;simplebank&#x2F;db&#x2F;sqlc&#x2F;store_test.go:83        Error:      Should NOT be empty, but was {0  0  {0001-01-01 00:00:00 +0000 UTC finite false}}        Test:       TestTransferTx FAIL FAILproject&#x2F;simplebank&#x2F;db&#x2F;sqlc**<strong>0.571s</strong></p><p>因为还没编写代码。。。。。草草草草操操操操哦哦操操操这视频叫我看的</p><hr><h3 id="十二-需要仔细处理并发-交易-以避免死锁"><a href="#十二-需要仔细处理并发-交易-以避免死锁" class="headerlink" title="十二.需要仔细处理并发 交易 以避免死锁"></a>十二.需要仔细处理并发 交易 以避免死锁</h3><p>数据库事务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; before: 6892 6969</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6979</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6989</span></span><br><span class="line">--- FAIL: TestTransferTx (0.04s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:102: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:102</span><br><span class="line">        Error:      Not equal: </span><br><span class="line">                    expected: 10</span><br><span class="line">                    actual  : 20</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc0.602s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个问题出在</p><p>account.sql.go他无法阻止一些东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- name: GetAccount :one</span><br><span class="line">SELECT * FROM accounts</span><br><span class="line">WHERE id = $1 LIMIT 1;</span><br></pre></td></tr></table></figure><p><strong>在两个终端中并行运行两个事务来观察这个问题</strong></p><p><em>BEGIN；开始事务</em></p><p><em>ROLLBACK；回滚事务</em></p><p>：第一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">WARNING:  there is already a transaction in progress</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# ROLLBACK;</span><br><span class="line">ROLLBACK</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"> id |  owner   | balance | currency |         created_at</span><br><span class="line">----+----------+---------+----------+----------------------------</span><br><span class="line">  1 | xiaozhao |     100 | USD      | 2024-10-08 09:03:03.272176</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>第二个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"></span><br><span class="line">这里会被阻止 并且必须等待第一个事务提交或回滚</span><br></pre></td></tr></table></figure><p>纠正方法1： 在sql中添加 ： 重新用make sqlc生成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>但是接下来出现了死锁错误：</p><p>添加日志寻找错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"></span><br><span class="line">&gt;&gt; before: 1826 5993</span><br><span class="line">tx 5 Create transfer</span><br><span class="line">tx 5 Create entry 1</span><br><span class="line">tx 5 Create entry 2</span><br><span class="line">tx 5 get account 1</span><br><span class="line">tx 2 Create transfer</span><br><span class="line">tx 5 update account 1</span><br><span class="line">tx 5 get account 2</span><br><span class="line">tx 4 Create transfer</span><br><span class="line">tx 5 update account 2</span><br><span class="line">tx 3 Create transfer</span><br><span class="line">tx 2 Create entry 1</span><br><span class="line">tx 4 Create entry 1</span><br><span class="line">tx 3 Create entry 1</span><br><span class="line">tx 1 Create transfer</span><br><span class="line">tx 2 Create entry 2</span><br><span class="line">tx 4 Create entry 2</span><br><span class="line">tx 3 Create entry 2</span><br><span class="line">tx 2 get account 1</span><br><span class="line">tx 4 get account 1</span><br><span class="line">tx 3 get account 1</span><br><span class="line">&gt;&gt; tx: 1816 6003</span><br><span class="line">tx 1 Create entry 1</span><br><span class="line">tx 1 Create entry 2</span><br><span class="line">tx 1 get account 1</span><br><span class="line">--- FAIL: TestTransferTx (0.95s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:52: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:52</span><br><span class="line">        Error:      Received unexpected error:</span><br><span class="line">                    ERROR: deadlock detected (SQLSTATE 40P01)</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc1.470s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>终端事务出现错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><ol><li><ul><li>第一个错误 <code>INSERT INFO transfers</code> 是语法错误，正确的语法是 <code>INSERT INTO transfers</code>。</li></ul></li></ol><ul><li>第二个错误 <code>INSERT INTO transfers (from_account_id to_account_id amount)</code> 也存在语法错误，缺少逗号分隔列名。正确的写法是 <code>INSERT INTO transfers (from_account_id, to_account_id, amount)</code>。</li></ul><ol start="2"><li><strong>当前事务已中止</strong>：<ul><li>由于之前的 SQL 语句（可能是第一条插入语句）出错，事务被标记为 “aborted”。这意味着在该事务中的所有后续 SQL 命令都将失败，直到事务被回滚。</li></ul></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p><strong>结束当前事务</strong>：</p><ul><li><p>在 PostgreSQL 中，你可以通过以下命令结束当前事务并回滚更改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="终端阻塞-事务状态"><a href="#终端阻塞-事务状态" class="headerlink" title="终端阻塞 事务状态"></a>终端阻塞 事务状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 确认当前事务状态</span><br><span class="line">在 PostgreSQL 中，如果一个事务因为某种原因（例如错误或未处理的异常）而中断，那么所有后续的 SQL 语句将会被忽略，直到你执行 ROLLBACK 或 COMMIT。首先，确保没有事务在进行中。</span><br><span class="line"></span><br><span class="line">你可以使用以下命令查看当前活动的事务：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="operator">^</span>CCancel request sent</span><br><span class="line">ERROR:  canceling statement due <span class="keyword">to</span> <span class="keyword">user</span> request</span><br><span class="line">CONTEXT:  <span class="keyword">SQL</span> statement &quot;SELECT 1 FROM ONLY &quot;public&quot;.&quot;accounts&quot; x WHERE &quot;id&quot; OPERATOR(pg_catalog.=) $1 FOR KEY SHARE OF x&quot;</span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"> datid <span class="operator">|</span>   datname   <span class="operator">|</span> pid <span class="operator">|</span> usesysid <span class="operator">|</span> usename <span class="operator">|</span> application_name <span class="operator">|</span> client_addr <span class="operator">|</span> client_hostname <span class="operator">|</span> client_port <span class="operator">|</span>         backend_start         <span class="operator">|</span>          xact_start           <span class="operator">|</span>          query_start          <span class="operator">|</span>         state_change</span><br><span class="line"> <span class="operator">|</span> wait_event_type <span class="operator">|</span>  wait_event   <span class="operator">|</span> state  <span class="operator">|</span> backend_xid <span class="operator">|</span> backend_xmin <span class="operator">|</span>                                            query                                            <span class="operator">|</span>  backend_type</span><br><span class="line"><span class="comment">-------+-------------+-----+----------+---------+------------------+-------------+-----------------+-------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------+---------------+--------+-------------+--------------+---------------------------------------------------------------------------------------------+----------------</span></span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">810</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">51.115963</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094867</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span>                 <span class="operator">|</span>               <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;                                      <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">802</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">07.854964</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850039</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">965</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">782</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">58.685461</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014413</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">963</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">775</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">51.971697</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">52</span>:<span class="number">16.478898</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280622</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280627</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">964</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">556</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">44.776508</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">11.909182</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551023</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551027</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> transactionid <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;                                               <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">638</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql          </span><br></pre></td></tr></table></figure><hr><p>从你提供的 <code>pg_stat_activity</code> 的查询结果来看，有多个活跃的事务正在等待锁。这可能是导致你无法执行 <code>INSERT</code> 操作的原因。以下是一些步骤，可以帮助你诊断并解决这个问题：</p><h4 id="1-识别并终止阻塞的事务"><a href="#1-识别并终止阻塞的事务" class="headerlink" title="1. 识别并终止阻塞的事务"></a>1. <strong>识别并终止阻塞的事务</strong></h4><p>你的查询结果显示了多个 <code>INSERT</code> 操作在等待锁。可以尝试强制终止这些阻塞的事务，以释放锁并允许你的操作继续进行。首先，记录下阻塞的 <code>pid</code>（进程 ID），然后使用以下命令终止它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>802</code>、<code>782</code> 和 <code>775</code> 是阻塞的 <code>pid</code>。请根据你的实际情况调整这条命令。</p><h4 id="2-确认事务的状态"><a href="#2-确认事务的状态" class="headerlink" title="2. 确认事务的状态"></a>2. <strong>确认事务的状态</strong></h4><p>如果终止了这些连接，确保你没有其他活跃的事务在运行。你可以再次运行以下命令确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><h4 id="3-尝试再次执行插入"><a href="#3-尝试再次执行插入" class="headerlink" title="3. 尝试再次执行插入"></a>3. <strong>尝试再次执行插入</strong></h4><p>在确保没有其他事务阻塞后，尝试重新执行你的插入操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;  <span class="comment">-- 开始新的事务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>) RETURNING <span class="operator">*</span>;  <span class="comment">-- 执行插入</span></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line">指令；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="4-如果问题依然存在"><a href="#4-如果问题依然存在" class="headerlink" title="4. 如果问题依然存在"></a>4. <strong>如果问题依然存在</strong></h4><p>如果问题依然存在，建议检查数据库的锁状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_locks WHERE granted = false;</span><br></pre></td></tr></table></figure><p><strong>又产生错误</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775,556,638,810);</span><br><span class="line">FATAL:  terminating connection due to administrator command</span><br><span class="line">server closed the connection unexpectedly</span><br><span class="line">        This probably means the server terminated abnormally</span><br><span class="line">        before or while processing the request.</span><br><span class="line">The connection to the server was lost. Attempting reset: Succeeded.</span><br></pre></td></tr></table></figure><p>回答：</p><p>看起来你在尝试终止阻塞的连接时，PostgreSQL 服务器意外关闭了连接。这可能是由于以下几个原因：</p><ol><li><strong>服务器崩溃</strong>：可能是因为在终止连接时，某个后台进程遇到了问题，导致服务器崩溃。</li><li><strong>资源不足</strong>：如果你的 PostgreSQL 服务器资源不足（例如内存或 CPU），在处理请求时可能会出现这种情况。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">由于服务器崩溃，重启 Docker 容器可能会帮助你恢复连接：</span><br><span class="line"></span><br><span class="line">docker restart postgres12</span><br><span class="line">在重启后检查连接：</span><br><span class="line"></span><br><span class="line">重启后，尝试重新连接到数据库，并检查活动连接：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity;</span><br><span class="line">再次终止阻塞的连接：</span><br><span class="line"></span><br><span class="line">如果连接正常，尝试再次运行终止命令：</span><br><span class="line"></span><br><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775, </span><br></pre></td></tr></table></figure><hr><p><strong>git上传一个项目没有共同历史</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查是否有共同历史</span><br><span class="line">git log --oneline --graph --all</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">强制合并冲突</span><br><span class="line">git pull origin main --allow-unrelated-histories</span><br></pre></td></tr></table></figure><hr><p>终端1：在没有阻塞的情况下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="number">1</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在终端一提交事务时 终端二会显示出结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">600</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql QUERIER</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id,to_account_id,amount) <span class="keyword">VALUE</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">-10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span><span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">110</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="5-postgres-lock：帮助查询哪里有锁"><a href="#5-postgres-lock：帮助查询哪里有锁" class="headerlink" title="5.postgres lock：帮助查询哪里有锁"></a>5.postgres lock：帮助查询哪里有锁</h4><p>The following query may be helpful to see what processes are blocking SQL statements (these only find row-level locks, not object-level locks).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT blocked_locks.pid     AS blocked_pid,</span><br><span class="line">       blocked_activity.usename  AS blocked_user,</span><br><span class="line">       blocking_locks.pid     AS blocking_pid,</span><br><span class="line">       blocking_activity.usename AS blocking_user,</span><br><span class="line">       blocked_activity.query    AS blocked_statement,</span><br><span class="line">       blocking_activity.query   AS current_statement_in_blocking_process</span><br><span class="line"> FROM  pg_catalog.pg_locks         blocked_locks</span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid</span><br><span class="line">  JOIN pg_catalog.pg_locks         blocking_locks </span><br><span class="line">      ON blocking_locks.locktype = blocked_locks.locktype</span><br><span class="line">      AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database</span><br><span class="line">      AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation</span><br><span class="line">      AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page</span><br><span class="line">      AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple</span><br><span class="line">      AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid</span><br><span class="line">      AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid</span><br><span class="line">      AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid</span><br><span class="line">      AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid</span><br><span class="line">      AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid</span><br><span class="line">      AND blocking_locks.pid != blocked_locks.pid</span><br><span class="line"></span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid</span><br><span class="line"> WHERE NOT blocked_locks.granted;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; 这条语句阻塞了</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Here<span class="string">&#x27;s an alternate view of that same data that includes an idea how old the state is</span></span><br><span class="line"><span class="string"># 列出所有锁</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT a.datname,</span></span><br><span class="line"><span class="string">         l.relation::regclass,</span></span><br><span class="line"><span class="string">         l.transactionid, //事务id</span></span><br><span class="line"><span class="string">         l.mode, 锁的mod</span></span><br><span class="line"><span class="string">         l.GRANTED,</span></span><br><span class="line"><span class="string">         a.usename,  who</span></span><br><span class="line"><span class="string">         a.query, </span></span><br><span class="line"><span class="string">         a.query_start,</span></span><br><span class="line"><span class="string">         age(now(), a.query_start) AS &quot;age&quot;,</span></span><br><span class="line"><span class="string">         a.pid</span></span><br><span class="line"><span class="string">FROM pg_stat_activity a</span></span><br><span class="line"><span class="string">JOIN pg_locks l ON l.pid = a.pid</span></span><br><span class="line"><span class="string">ORDER BY a.query_start;</span></span><br></pre></td></tr></table></figure><p><strong>死锁是由外键约束引起的</strong></p><p>1.删除约束</p><p>修改sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">NO</span> KEY <span class="keyword">UPDATE</span>;<span class="operator">/</span><span class="operator">/</span>这步时解决死锁的关键</span><br></pre></td></tr></table></figure><p>避免死锁是关键：微调事务中的查询</p><h3 id="十三-隔离级别"><a href="#十三-隔离级别" class="headerlink" title="十三.隔离级别"></a>十三.隔离级别</h3><p>数据库事务必须满足 ACID 原子性  一致性 隔离性 持久性</p><hr><h4 id="Read-Phenomenaa"><a href="#Read-Phenomenaa" class="headerlink" title="Read Phenomenaa"></a>Read Phenomenaa</h4><h4 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1.脏读"></a>1.脏读</h4><p>当一个事务读取了   其他并发事务写入的尚未提交的数据（导致 如果尚未提交的数据 最终回滚 可能导致用到错误的数据 ）</p><h4 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h4><p>当一个事务两次读取到同一记录并看到不同的值  因为第一次读取后提交的其他事务修改</p><h4 id="3-幻读"><a href="#3-幻读" class="headerlink" title="3.幻读"></a>3.幻读</h4><p>影响多行</p><h4 id="4-四种隔离级别"><a href="#4-四种隔离级别" class="headerlink" title="4.四种隔离级别"></a>4.四种隔离级别</h4><p>READ UNCOMMITMED： 可以看到其他未提交事务写入的数据</p><p>READ COMMITED：只能看到其他事务已经提交的数据</p><p>REPEATABLE READ:</p><p>SERIALIZABLE:</p><h4 id="5-mysql选择隔离级别"><a href="#5-mysql选择隔离级别" class="headerlink" title="5.mysql选择隔离级别"></a>5.mysql选择隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> sexxion transaction isolation level read commited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @@一种隔离级别</span><br></pre></td></tr></table></figure><h4 id="6-postgresql选择隔离级别-只有三个"><a href="#6-postgresql选择隔离级别-只有三个" class="headerlink" title="6.postgresql选择隔离级别 只有三个"></a>6.postgresql选择隔离级别 只有三个</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在postgresql中 未提交和已提交是一个级别</span><br><span class="line">show transaction isolation level</span><br><span class="line"></span><br><span class="line">set transaction isolation level read uncommited</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十四-持续集成或CI"><a href="#十四-持续集成或CI" class="headerlink" title="十四.持续集成或CI"></a>十四.持续集成或CI</h3><p><strong>自动化构建和测试流程进行验证</strong></p><h4 id="1-Github-Action"><a href="#1-Github-Action" class="headerlink" title="1.Github Action"></a>1.Github Action</h4><p>首先上传项目到github时如果出现了连接问题 就切换成ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:Whuichenggong/projects.git</span><br><span class="line">PS E:\projects&gt; git pull origin main --tags</span><br><span class="line">From github.com:Whuichenggong/projects</span><br><span class="line"> * branch            main       -&gt; FETCH_HEAD</span><br></pre></td></tr></table></figure><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo. &gt; .github\workflows\ci.yml</span><br></pre></td></tr></table></figure><p>安装工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">golang migrate</span><br></pre></td></tr></table></figure><p>但是目前我看不到页面我的action</p><h3 id="十五-RESTful-HEEP-API"><a href="#十五-RESTful-HEEP-API" class="headerlink" title="十五.RESTful HEEP API"></a>十五.RESTful HEEP API</h3><h4 id="1-创建api文件夹"><a href="#1-创建api文件夹" class="headerlink" title="1.创建api文件夹"></a>1.创建api文件夹</h4><p><strong>account.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateAccountRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Owner    <span class="type">string</span> <span class="string">`json:&quot;owner&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,oneof= USD EUR&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createAccount(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateAccountRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateAccountParams&#123;</span><br><span class="line">Owner:    req.Owner,</span><br><span class="line">Currency: req.Currency,</span><br><span class="line">Balance:  <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>server.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config util.Config</span><br><span class="line">store  db.Store</span><br><span class="line">router *gin.Engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store: store,</span><br><span class="line">&#125;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/api&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5/pgxpool&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot load config:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connPool, err := pgxpool.New(context.Background(), config.DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化数据库服务</span></span><br><span class="line">store := db.NewStore(connPool)</span><br><span class="line"><span class="comment">//运行gin框架</span></span><br><span class="line">runGinServer(config, store)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot start server:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runGinServer</span><span class="params">(config util.Config, store db.Store)</span></span> &#123;</span><br><span class="line">server, err := api.NewServer(config, store)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot create server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = server.Start(config.HTTPServerAddress)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot start server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据库重置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br><span class="line">   </span><br><span class="line">PostgreSQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name RESTART <span class="keyword">IDENTITY</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> accounts, entries RESTART <span class="keyword">IDENTITY</span>; 同时截断两个表</span><br></pre></td></tr></table></figure><p><strong>listaccount.go</strong></p><p>用postman请求时：&#x2F;&#x2F;查询参数</p><p><strong>page_id     1</strong></p><p><strong>page_size   5</strong></p><p><strong>在使用多组查找的时候没有找到用户？？？</strong></p><p>目前为止还是无法解决</p><hr><p>找了喜春学哥帮我找到了问题的所在在ListAccounts中 传进去的arg.Owner是个空值导致了出现了问题 把arg.Owner改成一个数据库中具体的值 就能找到问题的所在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner<span class="comment">/*问题所在*/</span>, arg.Limit, arg.Offset)</span><br></pre></td></tr></table></figure><hr><h4 id="2-模拟数据库测试"><a href="#2-模拟数据库测试" class="headerlink" title="2.模拟数据库测试"></a>2.模拟数据库测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用mock</span><br><span class="line"> go get github.com/golang/mock/mockgen@v1.6.0</span><br><span class="line"> </span><br><span class="line">PS E:\projects\simplebank\db\mock&gt; mockgen -destination db/mock/store.go project/simplebank/db/sqlc Store </span><br></pre></td></tr></table></figure><h4 id="3-account-test-go"><a href="#3-account-test-go" class="headerlink" title="3.account_test.go"></a>3.account_test.go</h4><p>出现的问题</p><hr><p>你提到的问题是由于 <code>mock_sqlc.MockStore</code> 未完全实现 <code>db.Store</code> 接口，特别是缺少 <code>createTransfer</code> 方法。为了解决这个问题，您可以采取以下步骤：</p><p>解决步骤：</p><ol><li><strong>确认 <code>db.Store</code> 接口的定义：</strong></li></ol><p>首先，确保 <code>db.Store</code> 接口定义了所有需要的方法。特别是，确认接口中是否包含 <code>createTransfer</code> 方法。</p><p>也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在你当前的测试代码中，store := mockdb.NewMockStore(ctrl) 返回的确实是 *mockdb.MockStore 类型，而 NewServer 需要的参数是 db.Store 接口类型。那么为什么没有类型错误呢？这是因为在 Go 中，接口是基于方法集实现的，而 *mockdb.MockStore 实现了 db.Store 接口中的所有方法。</span><br><span class="line"></span><br><span class="line">具体原因分析：</span><br><span class="line">接口实现方式：在 Go 语言中，接口并不关心你传递的具体类型（如 *mockdb.MockStore），它只关心该类型是否实现了接口中定义的所有方法。如果 *mockdb.MockStore 实现了 db.Store 接口的所有方法，那么它就可以被赋值给 db.Store 类型的变量。</span><br><span class="line"></span><br><span class="line">gomock 的自动生成：你使用 gomock 生成了 *mockdb.MockStore，这个 mock 类型会模拟 db.Store 接口的所有方法。因为它是通过 gomock 自动生成的，并且已经包含了 db.Store 中的所有方法，所以它实际上是符合 db.Store 接口的实现。</span><br><span class="line"></span><br><span class="line">类型匹配：在 Go 中，赋值 *mockdb.MockStore 给 db.Store 类型是可以的，因为 *mockdb.MockStore 实现了 db.Store 接口。即便 *mockdb.MockStore 是一个具体类型，只要它的方法集与 db.Store 接口的方法集匹配，Go 会认为它是一个合法的接口实现。</span><br><span class="line"></span><br><span class="line">为什么没有错误？</span><br><span class="line">由于 *mockdb.MockStore 实现了 db.Store 接口的所有方法，Go 编译器允许将 *mockdb.MockStore 传递给 NewServer 这个需要 db.Store 类型的函数参数。具体的原因是：</span><br><span class="line"></span><br><span class="line">NewMockStore 生成的 mock 类型实现了 db.Store 的所有方法，因此符合 db.Store 接口。</span><br><span class="line">在 Go 语言中，接口实现是隐式的，不需要显式声明实现接口，只要结构体的方法集与接口匹配即可。</span><br></pre></td></tr></table></figure><p>方法 1：使用类型断言验证</p><p>在 Go 中，你可以通过<strong>静态类型检查</strong>来验证一个类型是否实现了某个接口。具体方法是使用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _ db.Store = (*mockdb.MockStore)(nil)</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccountAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;配置文件出错&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//user, _ := randomUser(t)</span></span><br><span class="line">account := randomAccount()</span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">url := fmt.Sprintf(<span class="string">&quot;/accounts/%d&quot;</span>, tc.accountID)</span><br><span class="line">request, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//tc.setupAuth(t, request, server.tokenMaker)</span></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(t, recorder)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomAccount</span><span class="params">()</span></span> db.Account &#123;</span><br><span class="line"><span class="keyword">return</span> db.Account&#123;</span><br><span class="line">ID: util.RandomInt(<span class="number">1</span>, <span class="number">1000</span>),</span><br><span class="line"><span class="comment">//Owner:    owner,</span></span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchAccount</span><span class="params">(t *testing.T, body *bytes.Buffer, account db.Account)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotAccount db.Account</span><br><span class="line">err = json.Unmarshal(data, &amp;gotAccount)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, account, gotAccount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在这段代码中有不懂的地方</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">store是 *mockdb.MockStore类型</span><br><span class="line">而<span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) 需要的是db.store类型</span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"><span class="comment">//我觉得这是自相矛盾</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, sql.ErrNoRows)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>目前的问题是notfound处理不符合预期</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">setupAuth: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span> &#123;</span><br><span class="line">addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, db.ErrRecordNotFound)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)<span class="comment">//我手动把 recorder.Code换成404jiu&#x27;cheng&#x27;gogn</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h4 id="4-transfer-go"><a href="#4-transfer-go" class="headerlink" title="4.transfer.go"></a>4.transfer.go</h4><p>Currency      string <code>json:&quot;currency&quot; binding:&quot;required,currency&quot;</code> 添加了currency验证器 因为正常json不能识别USD等货币</p><p>实现思路 在go run mian.go后使用gin框架请求路由前 使用自己添加的数字验证器</p><p>在server.go中添加如下内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;USD&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store:  store,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccount)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">FromAccountID <span class="type">int64</span>  <span class="string">`json:&quot;from_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">ToAccountID   <span class="type">int64</span>  <span class="string">`json:&quot;to_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">Amount        <span class="type">int64</span>  <span class="string">`json:&quot;amount&quot; binding:&quot;required,gt=0&quot;`</span></span><br><span class="line">Currency      <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,currency&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createTransfer(ctx *gin.Context) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req transferRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 FromAccount</span></span><br><span class="line">fromAccount, valid := server.validAccount(ctx, req.FromAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 ToAccount</span></span><br><span class="line">toAccount, valid := server.validAccount(ctx, req.ToAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := db.TransferTxParams&#123;</span><br><span class="line">FromAccountID: fromAccount.ID,</span><br><span class="line">ToAccountID:   toAccount.ID,</span><br><span class="line">Amount:        req.Amount,</span><br><span class="line">&#125;</span><br><span class="line">result, err := server.store.TransferTx(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查id和货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> validAccount(ctx *gin.Context, accountID <span class="type">int64</span>, currency <span class="type">string</span>) (db.Account, <span class="type">bool</span>) &#123;</span><br><span class="line">account, err := server.store.GetAccount(ctx, accountID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> account.Currency != currency &#123;</span><br><span class="line">err := fmt.Errorf(<span class="string">&quot;account [%d] currency mismatch: %s vs %s&quot;</span>, account.ID, account.Currency, currency)</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用postman测试得到的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;transfer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;from_account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;to_account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afmxtl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:33:43.423875Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bdupue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:37:04.113466Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">-12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="十六-用户身份验证和授权"><a href="#十六-用户身份验证和授权" class="headerlink" title="十六.用户身份验证和授权"></a>十六.用户身份验证和授权</h3><h4 id="1-建user数据库表"><a href="#1-建user数据库表" class="headerlink" title="1.建user数据库表"></a>1.建user数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Use DBML <span class="keyword">to</span> <span class="keyword">define</span> your database structure</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> Docs: https:<span class="operator">/</span><span class="operator">/</span>dbml.dbdiagram.io<span class="operator">/</span>docs</span><br><span class="line"><span class="keyword">Table</span> <span class="keyword">user</span> <span class="keyword">as</span> U&#123;</span><br><span class="line">  username carchar [pk]</span><br><span class="line">  hashed_paassword <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  full_name <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  email <span class="type">varchar</span> [<span class="keyword">unique</span>, <span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  password_changed_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">default</span>: `<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z`]</span><br><span class="line">  create_at timestamptz [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> accounts <span class="keyword">as</span> A &#123;</span><br><span class="line">  id bigser [pk]</span><br><span class="line">  owner <span class="type">varchar</span> [<span class="keyword">ref</span>:<span class="operator">&gt;</span> U.username,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  balance <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  currency <span class="type">varchar</span>  [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    (owner, currency) [<span class="keyword">unique</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> entries &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>] </span><br><span class="line">  </span><br><span class="line">  amount <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> transfers &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  from_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  to_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  amount  <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建数据库迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq add_users</span><br></pre></td></tr></table></figure><p>出现了错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">make migrateup</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose up</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> <span class="keyword">Start</span> buffering <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> Read <span class="keyword">and</span> <span class="keyword">execute</span> <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> error: migration failed: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot; (<span class="keyword">column</span> <span class="number">69</span>) <span class="keyword">in</span> line <span class="number">6</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;user&quot; (</span><br><span class="line">  &quot;username&quot; carchar <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  &quot;hashed_paassword&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;full_name&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;password_changed_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z),</span><br><span class="line">  &quot;create_at&quot; timestamptz <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;accounts&quot; <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (&quot;owner&quot;) <span class="keyword">REFERENCES</span> &quot;user&quot; (&quot;username&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">--CREATE UNIQUE INDEX ON &quot;accounts&quot; (&quot;owner&quot;, &quot;currency&quot;);</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;acounts&quot; <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> &quot;owner_currency-unique&quot; <span class="keyword">UNIQUE</span> (&quot;owner&quot;, &quot;currency&quot;) (details: pq: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot;)</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migrateup] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：违反了外键约束</p><h3 id="十七-迁移失败原因"><a href="#十七-迁移失败原因" class="headerlink" title="十七.迁移失败原因"></a>十七.迁移失败原因</h3><p><strong>sql语句写错了 IF写成ID</strong></p><p>**理解去除外键等 **</p><h4 id="2-问题："><a href="#2-问题：" class="headerlink" title="2.问题："></a>2.问题：</h4><p>在执行数据库迁移时，出现的错误是因为在 <code>accounts</code> 表上有外键依赖 (<code>transfers</code> 表中的 <code>transfers_from_account_id_fkey</code> 和 <code>transfers_to_account_id_fkey</code> 约束依赖于 <code>accounts</code> 表)。当你尝试删除 <code>accounts</code> 表时，PostgreSQL 不允许删除这个表，因为还有其他表（如 <code>transfers</code>）依赖它。</p><p>但是执行了migrateup指令就会出现脏读现象 使得数据库版本变为2 所以我们要先回退到1版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make migratedown</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">34</span> <span class="keyword">Are</span> you sure you want <span class="keyword">to</span> apply <span class="keyword">all</span> down migrations? [y<span class="operator">/</span>N]</span><br><span class="line">y</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> Applying <span class="keyword">all</span> down migrations</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> error: Dirty database version <span class="number">2.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>修改迁移表的值为 FALSE：没管用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">执行migratedown操作时失败，并出现错误信息 “cannot <span class="keyword">drop</span> <span class="keyword">table</span> accounts because other objects depend <span class="keyword">on</span> it”，这表明accounts表有其他数据库对象依赖于它。</span><br><span class="line">原因包括：</span><br><span class="line">transfers表中的外键约束引用了accounts表。</span><br><span class="line">直接删除含外键的表会引发错误。</span><br><span class="line">建议：</span><br><span class="line">修改迁移脚本，先删除依赖的对象，如约束、触发器、视图等。</span><br><span class="line">使用CASCADE选项强制删除所有依赖的对象。</span><br><span class="line">在 makefile 中为migrate命令添加条件检查。</span><br><span class="line">可能的迁移修正示例：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers CASCADE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><h4 id="3-解除外键约束"><a href="#3-解除外键约束" class="headerlink" title="3.解除外键约束"></a>3.解除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">你可以按以下步骤修改你的迁移文件，确保先删除外键约束，再删除相关的表。</span><br><span class="line"></span><br><span class="line">删除外键约束： 在迁移文件中，先删除 transfers 表中的外键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_from_account_id_fkey;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_to_account_id_fkey;</span><br><span class="line"></span><br><span class="line">删除表： 然后，按顺序删除表：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> entries;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><p>migrate 出现的错误可能就是   把外键依赖删除然后在执行数据库迁移语句</p><hr><p>有没有可能你在写数据库迁移的时候就没有在migratedown中加入 删除外键约束的语句呢从而导致这么麻烦？？？</p><hr><p>编写migratedown时操作是和migrateup相反的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-问题："><a href="#4-问题：" class="headerlink" title="4.问题："></a>4.问题：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make migratedown1</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down <span class="number">1</span></span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">21</span> error: Dirty database version <span class="number">1.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown1] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个错误信息表明数据库处于 “dirty” 状态，通常意味着上一次的迁移未成功完成，导致数据库的迁移版本与实际执行情况不一致。要解决这个问题，你可以尝试以下步骤：</p><h4 id="5-解决："><a href="#5-解决：" class="headerlink" title="5.解决："></a>5.解决：</h4><p>检查数据库的迁移状态</p><p>使用 <code>migrate</code> 查看当前的迁移状态，以确认哪个版本是 dirty：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; version</span><br></pre></td></tr></table></figure><p>这将显示当前数据库的版本号以及 dirty 状态。</p><p>强制迁移版本</p><p>使用 <code>migrate force</code> 命令将数据库状态恢复为干净的版本。你可以将其设置为版本 1，这样可以清除 “dirty” 标志，同时保留当前的版本号。</p><p>执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; force <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个命令不会运行任何迁移，它只是将数据库的迁移版本重置为 1，同时将脏状态清除。</p><h4 id="6-检查当前数据库中的约束名"><a href="#6-检查当前数据库中的约束名" class="headerlink" title="6.检查当前数据库中的约束名"></a>6.检查当前数据库中的约束名</h4><p>如果不确定数据库中的约束名，可以通过以下 SQL 查询当前表中的约束名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> conname <span class="keyword">FROM</span> pg_constraint <span class="keyword">WHERE</span> conrelid <span class="operator">=</span> <span class="string">&#x27;accounts&#x27;</span>::regclass;</span><br></pre></td></tr></table></figure><p>每条语句后面要写分号啊啊啊啊！！！！！</p><h3 id="十八-user-test-go"><a href="#十八-user-test-go" class="headerlink" title="十八. user_test.go"></a>十八. user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomUser</span><span class="params">(t *testing.T)</span></span> User &#123;</span><br><span class="line"></span><br><span class="line">arg := CreateUserParams&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := testStore.CreateUser(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Username, user.Username)</span><br><span class="line">require.Equal(t, arg.HashedPassword, user.HashedPassword)</span><br><span class="line">require.Equal(t, arg.FullName, user.FullName)</span><br><span class="line">require.Equal(t, arg.Email, user.Email)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, user.CreateAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">createRandomUser(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user1 := createRandomUser(t)</span><br><span class="line">user2, err := testStore.GetUser(context.Background(), user1.Username)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, user1.Username, user2.Username)</span><br><span class="line">require.Equal(t, user1.HashedPassword, user2.HashedPassword)</span><br><span class="line">require.Equal(t, user1.FullName, user2.FullName)</span><br><span class="line">require.Equal(t, user1.Email, user2.Email)</span><br><span class="line">require.WithinDuration(t, user1.PasswordChangedAt.Time, user2.PasswordChangedAt.Time, time.Second)</span><br><span class="line">require.WithinDuration(t, user1.CreateAt.Time, user2.CreateAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在第29行代码有一个断言语句判断 ：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require.True(t, user.PasswordChangedAt.Time.IsZero())</span><br></pre></td></tr></table></figure><p>这个语句目前不能通过测试 往后看吧看看是么时候找到问题</p><h4 id="1-10-23外键约束问题"><a href="#1-10-23外键约束问题" class="headerlink" title="1. 10.23外键约束问题"></a>1. 10.23外键约束问题</h4><p>运行真个包测试出现的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个外键错误提示 &quot;ERROR: insert or update on table&quot;accounts&quot;violates foreign key constraint&quot;accounts_owner_fkey&quot;(SQLSTATE 23503)&quot; 意味着在尝试往 &quot;accounts&quot; 表中插入或更新数据时违反了名为 &quot;accounts_owner_fkey&quot; 的外键约束。</span><br></pre></td></tr></table></figure><p><strong>应该是    一个用户链接到账户 这就是主表与副表的关系  设置外键 将两个表链接到一起</strong></p><h4 id="2-数据库表出现错误"><a href="#2-数据库表出现错误" class="headerlink" title="2.数据库表出现错误"></a>2.数据库表出现错误</h4><p>数据库语句就写错了 正常每个表的 id序列都应该是自增的 如果不是这样将会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: null value in column &quot;id&quot; violates not-null constraint (SQLSTATE 23502)</span><br></pre></td></tr></table></figure><p>我们要重新修改数据库迁移语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;entries&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;can be negative or positive&#x27;</span>;</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;transfers&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;must be positive&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改过后 正常运行account_test.go</p><h4 id="3-修改状态码"><a href="#3-修改状态码" class="headerlink" title="3.修改状态码"></a>3.修改状态码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> pqErr, ok := err.(*pq.Error); ok &#123;</span><br><span class="line"><span class="keyword">switch</span> pqErr.Code.Name() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;foreign_key_violation&quot;</span>, <span class="string">&quot;unique_violation&quot;</span>:</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Println(pqErr.Code.Name())</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现错误了 等待明天修改</p><p><strong>10.24</strong></p><p>将上述代码语句修改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功解决了问题 。 这是为什么呢？？</p><p>应该是:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation</span><br></pre></td></tr></table></figure><p>这段代码起到了主要i作用</p><p>在error.go中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">ForeignKeyViolation = &quot;23503&quot;</span><br><span class="line">UniqueViolation     = &quot;23505&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这代表了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ForeignKeyViolation 常量的值是 &quot;23503&quot;，它代表 PostgreSQL 中的一个错误代码。当执行的数据库操作违反外键约束时，会触发这个错误。外键约束保证了不同表之间的关系，如果尝试插入、更新或删除的数据并不能被其他表中的相关记录引用，就会抛出这个错误。</span><br><span class="line"></span><br><span class="line">UniqueViolation 常量的值是 &quot;23505&quot;，这也是一个 PostgreSQL 错误代码。当向需要唯一值的字段插入了重复的值时，会引发这个错误。违反唯一性约束意味着这样的操作将导致两个记录含有相同的值，这在数据库规则中通常是不允许的，因为唯一约束保护了记录唯一识别数据的能力。</span><br></pre></td></tr></table></figure><h3 id="十九-在数据库中安全的存储密码"><a href="#十九-在数据库中安全的存储密码" class="headerlink" title="十九.在数据库中安全的存储密码"></a>十九.在数据库中安全的存储密码</h3><h4 id="1-password-go"><a href="#1-password-go" class="headerlink" title="1.password.go"></a>1.password.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashPassword</span><span class="params">(password <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">hashedPassword, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;哈希加密失败:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(hashedPassword), <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPassword</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckPassword</span><span class="params">(password <span class="type">string</span>, hashedPassword <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hashedPassword), []<span class="type">byte</span>(password))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-password-test-go"><a href="#2-password-test-go" class="headerlink" title="2.password_test.go"></a>2.password_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPassword</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">password := RandomString(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">hashPassword, err := HashPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">err = CheckPassword(password, hashPassword)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">wrongPassword := RandomString(<span class="number">6</span>)</span><br><span class="line">err = CheckPassword(wrongPassword, hashPassword)</span><br><span class="line">require.EqualError(t, err, bcrypt.ErrMismatchedHashAndPassword.Error())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-user-go"><a href="#3-user-go" class="headerlink" title="3.user.go"></a>3.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;fullname&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;full_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe Zhao&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhaozhonghe40@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password_changed_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;create_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>想让返回结果没有 这个字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rsp := CreateUserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br></pre></td></tr></table></figure><h3 id="二十-user-test-go"><a href="#二十-user-test-go" class="headerlink" title="二十.user_test.go"></a>二十.user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUserAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user, password := randomUser(t)</span><br><span class="line"></span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name          <span class="type">string</span></span><br><span class="line">body          gin.H</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:  user.Username,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:  password,</span><br><span class="line"><span class="string">&quot;full_name&quot;</span>: user.FullName,</span><br><span class="line"><span class="string">&quot;email&quot;</span>:     user.Email,</span><br><span class="line">&#125;,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       user.Username,</span><br><span class="line">FullName:       user.FullName,</span><br><span class="line">Email:          user.Email,</span><br><span class="line">HashedPassword: user.HashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">store.EXPECT().</span><br><span class="line">CreateUser(gomock.Any(), EqCreateUserParams(arg, password)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(user, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response code: %d\n&quot;</span>, recorder.Code)</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchUser(t, recorder.Body, user)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server := newTestServer(t, store)</span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Marshal body data to JSON</span></span><br><span class="line">data, err := json.Marshal(tc.body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %s\n&quot;</span>, <span class="type">string</span>(data)) <span class="comment">// 打印请求体</span></span><br><span class="line">url := <span class="string">&quot;/users&quot;</span></span><br><span class="line">request, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(data))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(recorder)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %v\n&quot;</span>, tc.body)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomUser</span><span class="params">(t *testing.T)</span></span> (user db.User, password <span class="type">string</span>) &#123;</span><br><span class="line">password = util.RandomString(<span class="number">6</span>)</span><br><span class="line">hashedPassword, err := util.HashedPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">user = db.User&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchUser</span><span class="params">(t *testing.T, body *bytes.Buffer, user db.User)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotUser db.User</span><br><span class="line">err = json.Unmarshal(data, &amp;gotUser)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, user.Username, gotUser.Username)</span><br><span class="line">require.Equal(t, user.FullName, gotUser.FullName)</span><br><span class="line">require.Equal(t, user.Email, gotUser.Email)</span><br><span class="line">require.Empty(t, gotUser.HashedPassword)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gomock.Any()这个验证的 准确度太低 任何测试基本都能通过</p><p>解决方法 使用 新的自定义匹配器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><p><strong>长记性 json的字段名错误 我测试了一下午</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FullName string <code>json:&quot;full_name&quot; binding:&quot;required&quot;</code>这里的json标签我把full_name 写成了fullname</p><h3 id="二十一-JWT"><a href="#二十一-JWT" class="headerlink" title="二十一.JWT"></a>二十一.JWT</h3><h4 id="1-JSON-Web令牌"><a href="#1-JSON-Web令牌" class="headerlink" title="1.JSON Web令牌"></a>1.JSON Web令牌</h4><p>密钥算法</p><p>服务器一般使用RSA 和 RS256来验证令牌</p><p>对称算法</p><p>非对称算法</p><p>必须在服务器代码中 检查令牌的算法标头</p><p>JWT令牌的很多问题：</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184159996.png" alt="image-20241026184159996"></p><p>RASETO作为替代JWT的安全方案</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184634250.png" alt="image-20241026184634250"></p><h4 id="2-基于令牌的身份验证的工作原理是什么？"><a href="#2-基于令牌的身份验证的工作原理是什么？" class="headerlink" title="2.基于令牌的身份验证的工作原理是什么？"></a>2.基于令牌的身份验证的工作原理是什么？</h4><p>基于令牌的身份验证从用户登录至系统、设备或应用程序开始，通常使用密码或安全问题。授权服务器验证初始身份验证，然后发放访问令牌，访问令牌是一小段数据，允许客户端应用程序向 API 服务器发出安全调用或信号。</p><p>基于令牌的身份验证的工作原理是为服务器提供第二种高度可靠的方式来验证用户的身份和请求的真实性。</p><p>完成该基于令牌的初始身份验证协议后，令牌就像盖了章的票据一样：用户可以在令牌生命周期内连续无缝访问相关资源，而无需重新进行身份验证。 该生命周期在用户注销或退出应用程序时结束，也可由设定的超时协议触发。</p><h4 id="3-基于令牌的身份验证有何益处？"><a href="#3-基于令牌的身份验证有何益处？" class="headerlink" title="3.基于令牌的身份验证有何益处？"></a>3.基于令牌的身份验证有何益处？</h4><p>基于令牌的身份验证能为多个利益相关者提供许多便利：</p><ul><li><strong>即时的用户体验</strong>：用户无需在每次返回系统、应用程序或网页时重新输入凭据并重新进行身份验证，只要令牌仍然有效（通常会持续到会话因注销或退出而结束），用户就可以保持即时访问。</li><li><strong>增加了数字安全性</strong>：基于令牌的身份验证在传统的基于密码或基于服务器的身份验证之上又增加了一道安全保护。通常，令牌比密码更难被窃取、被黑客入侵或以其他方式泄露。</li><li><strong>管理员控制</strong>：基于令牌的身份验证为管理员提供了对每个用户操作和事项的更精细的控制和可见性。</li><li><strong>减轻技术负担</strong>：由于令牌生成可以与令牌验证完全分离，因此验证可以由辅助服务（如 Entrust 身份和访问管理解决方案提供的服务）来处理。这将显著减少内部服务器和设备上的负载。</li></ul><h3 id="二十二-编写令牌"><a href="#二十二-编写令牌" class="headerlink" title="二十二.编写令牌"></a>二十二.编写令牌</h3><h4 id="make-go"><a href="#make-go" class="headerlink" title="make.go"></a>make.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maker is an interface for managing tokens</span></span><br><span class="line"><span class="keyword">type</span> Maker <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line">CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line">VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="payload-go"><a href="#payload-go" class="headerlink" title="payload.go"></a>payload.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Different types of error returned by the VerifyToken function</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrInvalidToken = errors.New(<span class="string">&quot;token is invalid&quot;</span>)</span><br><span class="line">ErrExpiredToken = errors.New(<span class="string">&quot;token has expired&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Payload contains the payload data of the token</span></span><br><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        uuid.UUID <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Username  <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">Role      <span class="type">string</span>    <span class="string">`json:&quot;role&quot;`</span></span><br><span class="line">IssuedAt  time.Time <span class="string">`json:&quot;issued_at&quot;`</span></span><br><span class="line">ExpiredAt time.Time <span class="string">`json:&quot;expired_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPayload creates a new token payload with a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPayload</span><span class="params">(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration)</span></span> (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">tokenID, err := uuid.NewRandom()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload := &amp;Payload&#123;</span><br><span class="line">ID:        tokenID,</span><br><span class="line">Username:  username,</span><br><span class="line">Role:      role,</span><br><span class="line">IssuedAt:  time.Now(),</span><br><span class="line">ExpiredAt: time.Now().Add(duration),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valid checks if the token payload is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(payload *Payload)</span></span> Valid() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> time.Now().After(payload.ExpiredAt) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jwt-maker-go"><a href="#jwt-maker-go" class="headerlink" title="jwt_maker.go"></a>jwt_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minSecretKeySize = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JWTMaker is a JSON Web Token maker</span></span><br><span class="line"><span class="keyword">type</span> JWTMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">secretKey <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewJWTMaker creates a new JWTMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWTMaker</span><span class="params">(secretKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(secretKey) &lt; minSecretKeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be at least %d characters&quot;</span>, minSecretKeySize)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;JWTMaker&#123;secretKey&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, role, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, payload)</span><br><span class="line">token, err := jwtToken.SignedString([]<span class="type">byte</span>(maker.secretKey))</span><br><span class="line"><span class="keyword">return</span> token, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">keyFunc := <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">_, ok := token.Method.(*jwt.SigningMethodHMAC)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(maker.secretKey), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken, err := jwt.ParseWithClaims(token, &amp;Payload&#123;&#125;, keyFunc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">verr, ok := err.(*jwt.ValidationError)</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; errors.Is(verr.Inner, ErrExpiredToken) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload, ok := jwtToken.Claims.(*Payload)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jwt_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJWTMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">role := util.DepositorRole</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.Equal(t, role, payload.Role)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredJWTToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInvalidJWTTokenAlgNone</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">payload, err := NewPayload(util.RandomOwner(), time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodNone, payload)</span><br><span class="line">token, err := jwtToken.SignedString(jwt.UnsafeAllowNoneSignatureType)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">payload, err = maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrInvalidToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作者说 passeto是比JWT更简洁更好用</p><h4 id="passeto-maker-go"><a href="#passeto-maker-go" class="headerlink" title="passeto_maker.go"></a>passeto_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aead/chacha20poly1305&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/o1egl/paseto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PasetoMaker is a PASETO token maker</span></span><br><span class="line"><span class="keyword">type</span> PasetoMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">paseto       *paseto.V2</span><br><span class="line">symmetricKey []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPasetoMaker creates a new PasetoMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPasetoMaker</span><span class="params">(symmetricKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(symmetricKey) != chacha20poly1305.KeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be exactly %d characters&quot;</span>, chacha20poly1305.KeySize)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maker := &amp;PasetoMaker&#123;</span><br><span class="line">paseto:       paseto.NewV2(),</span><br><span class="line">symmetricKey: []<span class="type">byte</span>(symmetricKey),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> CreateToken(username <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker.paseto.Encrypt(maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload := &amp;Payload&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := maker.paseto.Decrypt(token, maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = payload.Valid()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="paseto-make-test-go"><a href="#paseto-make-test-go" class="headerlink" title="paseto_make_test.go"></a>paseto_make_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPasetoMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredPasetoToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewPasetoMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//None算法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-28学习如何用令牌登录api"><a href="#10-28学习如何用令牌登录api" class="headerlink" title="10.28学习如何用令牌登录api"></a>10.28学习如何用令牌登录api</h3><h4 id="1-server-go"><a href="#1-server-go" class="headerlink" title="1.server.go"></a>1.server.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/token&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config     util.Config</span><br><span class="line">store      db.Store</span><br><span class="line">router     *gin.Engine</span><br><span class="line">tokenMaker token.Maker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;RMB&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">tokenMaker, err := token.NewPasetoMaker(config.TokenSymmetricKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Key length in bytes: %d\n&quot;</span>, <span class="built_in">len</span>([]<span class="type">byte</span>(config.TokenSymmetricKey)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;cannot create token maker: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config:     config,</span><br><span class="line">store:      store,</span><br><span class="line">tokenMaker: tokenMaker,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">server.setupRouter()</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupRouter() &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/users/login&quot;</span>, server.loginUser)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.POST(<span class="string">&quot;/users&quot;</span>, server.createUser)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccounts)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-user-go"><a href="#2-user-go" class="headerlink" title="2.user.go"></a>2.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="comment">//&quot;github.com/jackc/pgtype&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newUserResponse</span><span class="params">(user db.User)</span></span> UserResponse &#123;</span><br><span class="line"><span class="keyword">return</span> UserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received request: %+v\n&quot;</span>, req) <span class="comment">// 打印请求体</span></span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(fmt.Errorf(<span class="string">&quot;failed to hash password: %v&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">user, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error creating user: %v\n&quot;</span>, err) <span class="comment">// 打印错误</span></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := newUserResponse(user)</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span>       <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">User        UserResponse <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> loginUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req loginUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := server.store.GetUser(ctx, req.Username)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = util.CheckPassword(req.Password, user.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accessToken, err := server.tokenMaker.CreateToken(</span><br><span class="line">user.Username,</span><br><span class="line">server.config.AccessTokenDuration,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := loginUserResponse&#123;</span><br><span class="line"></span><br><span class="line">AccessToken: accessToken,</span><br><span class="line"></span><br><span class="line">User: newUserResponse(user),</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-问题1"><a href="#3-问题1" class="headerlink" title="3.问题1"></a>3.问题1</h4><p>为什么运行transfer_text.go出现了很多错误：</p><h4 id="4-解决1"><a href="#4-解决1" class="headerlink" title="4.解决1"></a>4.解决1</h4><p>在学习的时候图方便把作者的代码全部拉了下来  在transfer_test.go中 有很多情况 在transfer中并没有实现 导致无法对应这些情况</p><p>正常时作者留给你的任务 让你去课后实现这些功能</p><p>重新回顾第13集：</p><p>模拟数据库进行测试：</p><p>确保模拟数据库实现与真是数据库相同的接口</p><p>出问题的两段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;UnauthorizedUser&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.RandomCurrency(),</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account1.ID)).Times(<span class="number">1</span>).Return(account1, <span class="literal">nil</span>)</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account2.ID)).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;NoAuthorization&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.USD,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-问题2"><a href="#5-问题2" class="headerlink" title="5.问题2"></a>5.问题2</h4><p>为什么得到分组用户出错</p><h4 id="6-解决2"><a href="#6-解决2" class="headerlink" title="6.解决2"></a>6.解决2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为什么得到分页的时候用户为空 错误出现在这里</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">items := []Account&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> i Account</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(</span><br><span class="line">&amp;i.ID,</span><br><span class="line">&amp;i.Owner,</span><br><span class="line">&amp;i.Balance,</span><br><span class="line">&amp;i.Currency,</span><br><span class="line">&amp;i.CreatedAt,</span><br><span class="line">); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items = <span class="built_in">append</span>(items, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rows, err :&#x3D; q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset) 这里查询的条件有arg.owner 但是我们在测试的时候并没有设置owner 可以显示尝试把owner去掉</p><h4 id="11-6日-二十二-身份验证中间件-授权API请求"><a href="#11-6日-二十二-身份验证中间件-授权API请求" class="headerlink" title="11.6日 二十二.身份验证中间件 授权API请求"></a>11.6日 二十二.身份验证中间件 授权API请求</h4><p>使用make sqlc 和 make mock 重新为listAccount增加 Owner字段</p><p>搞了半天 app.env配置错了 应该是</p><p>ACCESS_TOKEN_DURATION&#x3D;15m</p><p>我写成别的了</p><h3 id="二十三-部署目前的程序"><a href="#二十三-部署目前的程序" class="headerlink" title="二十三.部署目前的程序"></a>二十三.部署目前的程序</h3><h4 id="1-对程序进行docker化"><a href="#1-对程序进行docker化" class="headerlink" title="1.对程序进行docker化"></a>1.对程序进行docker化</h4><p>运用git部署</p><p><strong>注意</strong>：永远不要将更改直接推送到主分支</p><p>1.创建新分支-》推送分支-》产生以下结果-》复制url-》创建标题-》创建拉取请求-》从而可以看到 Files changed 文件的更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 local objects.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for &#x27;ft/docker&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/Whuichenggong/projects/pull/new/ft/docker</span><br><span class="line">remote:</span><br><span class="line">To github.com:Whuichenggong/projects.git</span><br><span class="line"> * [new branch]      ft/docker -&gt; ft/docker</span><br></pre></td></tr></table></figure><p>重新回看第10集 配置工作流 最近这两天了解到了工作流有了更深的理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># This workflow will build a golang project</span><br><span class="line"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span><br><span class="line"></span><br><span class="line">name: Go</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line"></span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">    - name: Set up Go</span><br><span class="line">      uses: actions/setup-go@v4</span><br><span class="line">      with:</span><br><span class="line">        go-version: &#x27;1.20&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: go build -v ./...</span><br><span class="line"></span><br><span class="line">    - name: Test</span><br><span class="line">      run: go test -v ./...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>go语言的工作流模板</p><p>giuthub action 相当于将一些列配置放到了github上的一个服务器上 也就是相当于将东西放进了github的服务器</p><hr><h4 id="11-10日"><a href="#11-10日" class="headerlink" title="11.10日"></a>11.10日</h4><p>还是github action问题 终于把 Install golang-migrate解决了</p><p>因为： 在最开始推送项目到github的时候 就是因为把项目结构推送错了 ，导致推送到github上的项目根目录没有go.mod文件这造成了很大的错误 导致一直失败</p><p>今天又解决了 install golang-migrate问题 因为sudo mv migrate &#x2F;usr&#x2F;bin&#x2F;migrate   把之前的 名称换成 <strong>migrate</strong>就好用了</p><p>问题2：</p><p>make migratedown migrate -path &#x2F;db&#x2F;migration -database “postgresql:&#x2F;&#x2F;root:secret@localhost:5432&#x2F;simple_bank?sslmode&#x3D;disable” -verbose down 2024&#x2F;11&#x2F;10 13:30:17 error: open &#x2F;db&#x2F;migration.: The system cannot find the path specified. make: *** [migratedown] 错误 1</p><p>在Makefile中的指令的 路径又弄错了 必须让指令能找到位置所在</p><p><strong>卧槽：成功了 绿了 妈的</strong></p><p>牛逼</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>官方镜像</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-alpine3.<span class="number">13</span> </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>docker build -t simplebank:latest</code> 使用这个指令构建镜像</p><p>images的大小很大</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images </span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       48621dad3f4d   5 minutes ago   656MB</span><br></pre></td></tr></table></figure><p>分阶段构建可以减少体积</p><p>也就是</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage 构建二进制文件</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.23</span>-alpine3.<span class="number">20</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Production stage 生产环境</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.20</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/main .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终体积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       f64691fae70e   7 seconds ago   27.1MB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a列出容器状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker rmi f64691fae70e</span><br><span class="line">Untagged: simplebank:latest</span><br><span class="line">Deleted: sha256:f64691fae70e516b799ed846bbeef10045388dae1932ecafc8b93fb208b403f0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//运行这条指令便启动了容器 监听8080端口</span><br><span class="line"> docker run --name simplebank -p 8080:8080 simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 127.0.0.1:1124</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//重新启动镜像</span><br><span class="line">PS E:\projects\simplebank&gt; docker rm simplebank</span><br><span class="line">simplebank</span><br><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release simplebank:latest</span><br><span class="line"></span><br><span class="line">这样启动就不会有上面的输出了</span><br></pre></td></tr></table></figure><p><code> docker container inspect postgres12</code>  检查网络设置</p><h4 id="11-13日"><a href="#11-13日" class="headerlink" title="11.13日"></a>11.13日</h4><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>解决用docker启动后 无法用postman测试接口的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8083:8083 -e GIN_MODE=release -e       DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br></pre></td></tr></table></figure><p><strong>每次修改完dockerfiles或者什么 要记住重新构建镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t simplebank:latest .</span><br></pre></td></tr></table></figure><h5 id="关键："><a href="#关键：" class="headerlink" title="关键："></a>关键：</h5><p><strong>先使用调试功能 查看是否正确监听端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8080:8080  simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>这次在测试的时候 有了反应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 01:17:23 | 401 |      39.567µs |      172.17.0.1 | GET      &quot;/accounts/1&quot;</span><br></pre></td></tr></table></figure><p>此更改导致了postgres连接出错</p><p>#####<strong>不使用ip地址使用用户定义的网络 连接到postrges</strong></p><p><code>docker network ls</code></p><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID     NAME                DRIVER    SCOPE</span><br><span class="line">ca0046b2c82c   bank-network        bridge    <span class="keyword">local</span></span><br><span class="line">cf35f34026f7   bridge              bridge    <span class="keyword">local</span></span><br><span class="line">1500c05159ef   host                host      <span class="keyword">local</span></span><br><span class="line">074a556122c6   none                null      <span class="keyword">local</span></span><br><span class="line">fafb76e1721e   start_gvb-network   bridge    <span class="keyword">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>桥接网络</p><h5 id="查看更详细的网络信息"><a href="#查看更详细的网络信息" class="headerlink" title="查看更详细的网络信息"></a>查看更详细的网络信息</h5><p><code>docker network inspect bridge</code></p><p>删除网络:</p><p><code>docker network rm 0fd871187ef1</code></p><h5 id="创建自己的网络"><a href="#创建自己的网络" class="headerlink" title="创建自己的网络"></a>创建自己的网络</h5><p>&#96;&#96;docker network create bank_network&#96;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`0fd871187ef1e3b3bee37ac898e895cf54615e267bd6af9d7b2c045fc5178a14</span><br></pre></td></tr></table></figure><h5 id="连接创建的网络"><a href="#连接创建的网络" class="headerlink" title="连接创建的网络"></a>连接创建的网络</h5><p><code>docker network connect bank-network</code></p><p>将postrges12 连接到我们创建的网络</p><p><code>docker network connect bank-network postgres12</code></p><p><code>docker network inspect bank-network</code></p><h6 id="得先启动-postrges12"><a href="#得先启动-postrges12" class="headerlink" title="得先启动 postrges12"></a>得先启动 postrges12</h6><p><strong>验证 <code>postgres12</code> 容器是否正在运行</strong>： 检查 named 的容器是否正在运行：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查找具有名称的容器并检查其状态。如果容器未运行，请启动容器：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start postgres12</span><br></pre></td></tr></table></figure><p><strong>再次将 <code>postgres12</code> 连接到网络</strong>： 现在，尝试将容器连接到 ：<code>postgres12``bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect bank-network postgres12</span><br></pre></td></tr></table></figure><p>现在已经成功添加了postrges12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br></pre></td></tr></table></figure><p>此时查看</p><p><code> docker container inspect postgres12</code></p><p>这个容器将会有两段网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&quot;NetworkSettings&quot;: &#123;</span><br><span class="line">           &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">           &quot;SandboxID&quot;: &quot;2ea1e674576863a5e20fe6dda2a3ea265dd11b0223dc4a94bbfa23c57adc66d9&quot;,</span><br><span class="line">           &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/2ea1e6745768&quot;,</span><br><span class="line">           &quot;Ports&quot;: &#123;</span><br><span class="line">               &quot;5432/tcp&quot;: [</span><br><span class="line">                   &#123;</span><br><span class="line">                       &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">                       &quot;HostPort&quot;: &quot;5432&quot;</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;HairpinMode&quot;: false,</span><br><span class="line">           &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">           &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">           &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">           &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">           &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">           &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">           &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">           &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">           &quot;Networks&quot;: &#123;</span><br><span class="line">               &quot;bank-network&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ],</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;DNSNames&quot;: [</span><br><span class="line">                       &quot;postgres12&quot;,</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ]</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;bridge&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: null,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: null,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;cf35f34026f787fe91864d7e7a2ab23d482b6a6b956a10d596ae0d9818aa7e16&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: null,</span><br><span class="line">                   &quot;DNSNames&quot;: null</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>重新使用指令</p><p><code> docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</code></p><p>此时 simplebank容器将与postgres12运行在同一个网络上</p><p>将172.17.0.2替换成postgres12 因为可以通过名称访问网络</p><p>启动容器指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@postgres12:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 02:06:27 | 400 |     105.754µs |      172.18.0.1 | POST     &quot;/users/login&quot;</span><br></pre></td></tr></table></figure><p><code>docker network inspect bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">       &quot;Name&quot;: &quot;bank-network&quot;,</span><br><span class="line">       &quot;Id&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">       &quot;Created&quot;: &quot;2024-05-10T13:32:42.557489581Z&quot;,</span><br><span class="line">       &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">       &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">       &quot;EnableIPv6&quot;: false,</span><br><span class="line">       &quot;IPAM&quot;: &#123;</span><br><span class="line">           &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">           &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">           &quot;Config&quot;: [</span><br><span class="line">               &#123;</span><br><span class="line">                   &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Internal&quot;: false,</span><br><span class="line">       &quot;Attachable&quot;: false,</span><br><span class="line">       &quot;Ingress&quot;: false,</span><br><span class="line">       &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">           &quot;Network&quot;: &quot;&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;a76e19ef1c210d1cc4f458ed9b2238db810872417e0a1072e8467dda82663a2a&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;487f3ec81ada3bf84e44af700d0ae930075ce8c683755d789c27cadc7f95ed06&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">       &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>目前有两个容器在自定义的网络中运行</p><p><strong>之后的postrges就可以正常使用了</strong></p><p>更改Makefile文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">postgres:</span></span><br><span class="line">docker run --name postgres12 --network bank-network -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine</span><br></pre></td></tr></table></figure><p>在github中 pullrequest中可以查看更改 并且 merge 分支到主分支-》然后确认合并—》Delete branch</p><h4 id="二十四-docker-compose"><a href="#二十四-docker-compose" class="headerlink" title="二十四.docker-compose"></a>二十四.docker-compose</h4><p><a href="https://docs.docker.com/">https://docs.docker.com</a></p><p>创建docker-compose.yaml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:12-alpine</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=root</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">      - POSTGRES_DB=simple_bank</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5432:5432&quot;</span><br><span class="line">    </span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    </span><br><span class="line">    environment:</span><br><span class="line">      - DB_SOURCE=postgresql://root:secret@postgres:5432/simple_bank?sslmode=disable</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p><code>docker compose up</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> docker compose up</span><br><span class="line">[+] Running 1/0</span><br><span class="line"> ✔ Container simplebank-api-1  Created            0.0s </span><br><span class="line">Attaching to api-1, postgres-1</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line">api-1       |  - using env:     export GIN_MODE=release</span><br><span class="line">api-1       |  - using code:    gin.SetMode(gin.ReleaseMode)</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">api-1       | Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">api-1       | [GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br><span class="line">postgres-1  | The files belonging to this database system will be owned by user &quot;postgres&quot;.</span><br><span class="line">postgres-1  | This user must also own the server process.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | The database cluster will be initialized with locale &quot;en_US.utf8&quot;.</span><br><span class="line">postgres-1  | The default database encoding has accordingly been set to &quot;UTF8&quot;.</span><br><span class="line">postgres-1  | The default text search configuration will be set to &quot;english&quot;.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Data page checksums are disabled.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | fixing permissions on existing directory /var/lib/postgresql/data ... ok</span><br><span class="line">postgres-1  | creating subdirectories ... ok</span><br><span class="line">postgres-1  | selecting dynamic shared memory implementation ... posix</span><br><span class="line">postgres-1  | selecting default max_connections ... 100</span><br><span class="line">postgres-1  | selecting default shared_buffers ... 128MB</span><br><span class="line">postgres-1  | selecting default time zone ... UTC</span><br><span class="line">postgres-1  | creating configuration files ... ok</span><br><span class="line">postgres-1  | running bootstrap script ... ok</span><br><span class="line">postgres-1  | sh: locale: not found</span><br><span class="line">postgres-1  | 2024-11-13 06:50:42.795 UTC [30] WARNING:  no usable system locales were found</span><br><span class="line">postgres-1  | performing post-bootstrap initialization ... ok</span><br><span class="line">postgres-1  | syncing data to disk ... ok</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Success. You can now start the database server using:</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |     pg_ctl -D /var/lib/postgresql/data -l logfile start</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | initdb: warning: enabling &quot;trust&quot; authentication for local connections</span><br><span class="line">postgres-1  | You can change this by editing pg_hba.conf or using the option -A, or</span><br><span class="line">postgres-1  | --auth-local and --auth-host, the next time you run initdb.</span><br><span class="line">postgres-1  | waiting for server to start....2024-11-13 06:50:43.144 UTC [36] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.146 UTC [36] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.160 UTC [37] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.164 UTC [36] LOG:  database system is ready to accept connections</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server started</span><br><span class="line">postgres-1  | CREATE DATABASE</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | waiting for server to shut down....2024-11-13 06:50:43.315 UTC [36] LOG:  received fast shutdown request</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.316 UTC [36] LOG:  aborting any active transactions</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [36] LOG:  background worker &quot;logical replication launcher&quot; (PID 43) exited with exit code 1</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [38] LOG:  shutting down</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.330 UTC [36] LOG:  database system is shut down</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server stopped</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | PostgreSQL init process complete; ready for start up.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line"></span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.450 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.461 UTC [51] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.465 UTC [1] LOG:  database system is ready to accept connections</span><br></pre></td></tr></table></figure><p>构建镜像完成后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED        SIZE</span><br><span class="line">simplebank-api     latest       eb772c9e932f   6 hours ago    27.1MB</span><br><span class="line">simplebank         latest       9f145f0ce89f   6 hours ago    27.1MB</span><br></pre></td></tr></table></figure><p>查看占用端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`netstat -ano | findstr :5432`</span><br><span class="line">  TCP    0.0.0.0:5432           0.0.0.0:0              LISTENING       30352</span><br><span class="line">  TCP    [::]:5432              [::]:0                 LISTENING       30352</span><br><span class="line">  TCP    [::1]:5432             [::]:0                 LISTENING       35464</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 30352&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">com.docker.backend.exe       30352 Console                    2    117,104 K</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 35464&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">wslrelay.exe                 35464 Console                    2      8,328 K</span><br></pre></td></tr></table></figure><p>在 Windows 上（终止进程）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 30352 /F</span><br><span class="line">taskkill /PID 35464 /F</span><br></pre></td></tr></table></figure><p><code>docker ps</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                COMMAND                   CREATED             STATUS         PORTS                                      NAMES</span><br><span class="line">dab18d564f9c   postgres:12-alpine   &quot;docker-entrypoint.s…&quot;   About an hour ago   Up 7 minutes   0.0.0.0:5432-&gt;5432/tcp                     simplebank-postgres-1</span><br><span class="line">c4c37a8a870a   simplebank-api       &quot;/app/main&quot;               About an hour ago   Up 7 minutes   0.0.0.0:8080-&gt;8080/tcp                     simplebank-api-1</span><br></pre></td></tr></table></figure><p><code>docker network inspect simplebank_default</code></p><p>两个服务容器实际在同一个网络上运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> docker network inspect simplebank_default</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;simplebank_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;fab69439b1a55525d81fa70d9e789c3b6d51ba8d7899924deb8413fb724ca951&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-13T05:28:49.358856507Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.20.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.20.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;c4c37a8a870a75e9fa626c7034dd935c8f3afdb86c5e2c37b012503bff9c7ab7&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;8a247db55db70983d6b2d619caef09bf2593964daa02be5773448fbd74f9d791&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;dab18d564f9c4554ef255e50205be2f4dd9c1fada3391dde698d7717d0e642ff&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;2b9220ab1bcc031b29631a2ecb462a48a475a722b10592c478124c03d95e29df&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;simplebank&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;2.24.6&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>docker compose down</code></p><p>删除现在所有网络</p><p>Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Build stage 构建二进制文件</span></span><br><span class="line">FROM golang:1.23-alpine3.20 AS build</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line">RUN go build -o main main.go</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run stage</span> </span><br><span class="line">FROM alpine:3.20</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build /app/main .</span><br><span class="line">COPY app.env .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一步可以解决2024/11/13 08:08:06 cannot load config:Config File <span class="string">&quot;app&quot;</span> Not Found <span class="keyword">in</span> <span class="string">&quot;[/app]&quot;</span></span></span><br><span class="line"></span><br><span class="line">EXPOSE 8080 </span><br><span class="line">CMD [ &quot;/app/main&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的实现</title>
      <link href="/2024/11/09/data_structure/"/>
      <url>/2024/11/09/data_structure/</url>
      
        <content type="html"><![CDATA[<h2 id="双链表的实现"><a href="#双链表的实现" class="headerlink" title="双链表的实现"></a>双链表的实现</h2><h3 id="基于go语言实现"><a href="#基于go语言实现" class="headerlink" title="基于go语言实现"></a>基于go语言实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// Node 定义双链表节点</span><br><span class="line">type Node struct &#123;</span><br><span class="line">    data  interface&#123;&#125;</span><br><span class="line">    prev  *Node</span><br><span class="line">    next  *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DoublyLinkedList 定义双链表</span><br><span class="line">type DoublyLinkedList struct &#123;</span><br><span class="line">    head *Node</span><br><span class="line">    tail *Node</span><br><span class="line">    size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertTail 向链表尾部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertTail(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail.next = newNode</span><br><span class="line">        newNode.prev = dll.tail</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertHead 向链表头部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertHead(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        newNode.next = dll.head</span><br><span class="line">        dll.head.prev = newNode</span><br><span class="line">        dll.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Remove 删除节点</span><br><span class="line">func (dll *DoublyLinkedList) Remove(node *Node) &#123;</span><br><span class="line">    if node.prev != nil &#123;</span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.head = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    if node.next != nil &#123;</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail = node.prev</span><br><span class="line">    &#125;</span><br><span class="line">    node.prev = nil</span><br><span class="line">    node.next = nil</span><br><span class="line">    dll.size--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Display 打印双链表</span><br><span class="line">func (dll *DoublyLinkedList) Display() &#123;</span><br><span class="line">    curr := dll.head</span><br><span class="line">    for curr != nil &#123;</span><br><span class="line">        fmt.Print(curr.data, &quot; &quot;)</span><br><span class="line">        curr = curr.next</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    dll := DoublyLinkedList&#123;&#125;</span><br><span class="line">    dll.InsertTail(1)</span><br><span class="line">    dll.InsertTail(2)</span><br><span class="line">    dll.InsertHead(0)</span><br><span class="line">    dll.Display() // 应该输出：0 1 2</span><br><span class="line"></span><br><span class="line">    // 删除节点</span><br><span class="line">    headNode := dll.head</span><br><span class="line">    dll.Remove(headNode)</span><br><span class="line">    dll.Display() // 应该输出：1 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于c语言实现双链表"><a href="#基于c语言实现双链表" class="headerlink" title="基于c语言实现双链表"></a>基于c语言实现双链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">// 定义双链表节点结构</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Node* prev;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125; Node;</span><br><span class="line">// 创建一个新节点</span><br><span class="line">Node* createNode(int data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(sizeof(Node));</span><br><span class="line">    if (newNode == NULL) &#123;</span><br><span class="line">        printf(&quot;内存分配失败&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;prev = NULL;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line">    return newNode;</span><br><span class="line">&#125;</span><br><span class="line">// 在双链表前插入节点</span><br><span class="line">void insertFront(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    newNode-&gt;next = *head;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    *head = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在双链表后插入节点</span><br><span class="line">void insertRear(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        *head = newNode;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* last = *head;</span><br><span class="line">    while (last-&gt;next != NULL) &#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = last;</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表前的节点</span><br><span class="line">void deleteFront(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    *head = (*head)-&gt;next;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表后的节点</span><br><span class="line">void deleteRear(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* secondLast = *head;</span><br><span class="line">    while (secondLast-&gt;next-&gt;next != NULL) &#123;</span><br><span class="line">        secondLast = secondLast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = secondLast-&gt;next;</span><br><span class="line">    secondLast-&gt;next = NULL;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 打印双链表</span><br><span class="line">void printList(Node* node) &#123;</span><br><span class="line">    while (node != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Node* head = NULL;</span><br><span class="line"></span><br><span class="line">    insertFront(&amp;head, 10);</span><br><span class="line">    insertFront(&amp;head, 20);</span><br><span class="line">    insertRear(&amp;head, 30);</span><br><span class="line">    insertRear(&amp;head, 40);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：20 10 30 40</span><br><span class="line"></span><br><span class="line">    deleteFront(&amp;head);</span><br><span class="line">    deleteRear(&amp;head);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：10 30</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>区别：</p><p>c语言的双链表 我们要清楚 改变了头节点 所以要传入二级指针 才能正确的记录到头指针的变化</p><p>而Go语言，因为 Go 中的切片、映射和通道等是引用类型，它们在函数参数传递时本身就是按引用传递的，不需要通过指针的指针（二级指针）来实现修改。这实际上是 Go 语言的一个特性：切片、映射和通道在函数间传递时，共享底层数据结构，因此不需要额外的二级指针。</p><h2 id="栈的c语言实现"><a href="#栈的c语言实现" class="headerlink" title="栈的c语言实现"></a>栈的c语言实现</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Stack &#123;</span><br><span class="line">    int data[10];</span><br><span class="line">    int top;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack* stack) &#123;</span><br><span class="line">    stack-&gt;top = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsFull(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == 9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool push(Stack* stack, int data) &#123;</span><br><span class="line">    if (IsFull(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经满了不能执行入栈操作\n&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    stack-&gt;data[++stack-&gt;top] = data;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int pop(Stack* stack) &#123;</span><br><span class="line">    if (IsEmpty(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;  </span><br><span class="line">    &#125;</span><br><span class="line">    return stack-&gt;data[stack-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* stack) &#123;</span><br><span class="line">    printf(&quot;栈中元素：&quot;);</span><br><span class="line">    for (int i = stack-&gt;top; i &gt;= 0 ; i--) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, stack-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line"></span><br><span class="line">    push(&amp;stack, 1);</span><br><span class="line">    push(&amp;stack, 2);</span><br><span class="line">    push(&amp;stack, 3);</span><br><span class="line">    push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);</span><br><span class="line"></span><br><span class="line">    //pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">   // pop(&amp;stack);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列c语言实现"><a href="#队列c语言实现" class="headerlink" title="队列c语言实现"></a>队列c语言实现</h2><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表c简单实现"><a href="#哈希表c简单实现" class="headerlink" title="哈希表c简单实现"></a>哈希表c简单实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define NUM 5</span><br><span class="line"></span><br><span class="line">typedef struct HashList &#123;</span><br><span class="line">    int num;</span><br><span class="line">    char data[NUM]; // 修改为字符数组</span><br><span class="line">&#125; HashList;</span><br><span class="line"></span><br><span class="line">HashList* initList() &#123;</span><br><span class="line">    HashList* list = (HashList*)malloc(sizeof(HashList));</span><br><span class="line">    list-&gt;num = 0;</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        list-&gt;data[i] = 0; // 初始化所有元素为0</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ASCII码计算自动计算</span><br><span class="line">int hash(int data) &#123;</span><br><span class="line">    return data % NUM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(HashList* list, char data) &#123;</span><br><span class="line">    int index = hash(data);</span><br><span class="line">    printf(&quot;index = %d\n&quot;, index);</span><br><span class="line">    // 发生冲突</span><br><span class="line">    while (list-&gt;data[index] != 0) &#123; // 确保这个位置已经被占用</span><br><span class="line">        int count = 1; </span><br><span class="line">        index = hash(index + 1); // 线性查找</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;index = %d\n&quot;, index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    list-&gt;data[index] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    HashList* list = initList();</span><br><span class="line">    put(list, &#x27;A&#x27;);</span><br><span class="line">    put(list, &#x27;F&#x27;);</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        if (list-&gt;data[i] != 0) &#123; // 只打印已经使用的槽位</span><br><span class="line">            printf(&quot;%c\n&quot;, list-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leet-code之旅</title>
      <link href="/2024/11/09/leet-code/"/>
      <url>/2024/11/09/leet-code/</url>
      
        <content type="html"><![CDATA[<h1 id="正式开启刷leet-code"><a href="#正式开启刷leet-code" class="headerlink" title="正式开启刷leet-code"></a>正式开启刷leet-code</h1><h3 id="第225-用两个队列实现栈"><a href="#第225-用两个队列实现栈" class="headerlink" title="第225.用两个队列实现栈"></a>第225.用两个队列实现栈</h3><p>问题：</p><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><p>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</p><h4 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">type MyStack struct &#123;</span><br><span class="line">    list1 := list.New()</span><br><span class="line">    list2 := list.New()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Pop()</span><br><span class="line">    MyStack.Top()</span><br><span class="line">    MyStack.empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">    this.list1.PushBack(x)</span><br><span class="line">    temp := x</span><br><span class="line">    this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">   temp = this.list2.Value</span><br><span class="line">   e = e.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">    temp = this.list2.Value</span><br><span class="line">    return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">    if this.list2.Value == nil</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyStack object will be instantiated and called as such:</span><br><span class="line"> * obj := Constructor();</span><br><span class="line"> * obj.Push(x);</span><br><span class="line"> * param_2 := obj.Pop();</span><br><span class="line"> * param_3 := obj.Top();</span><br><span class="line"> * param_4 := obj.Empty();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="虚伪的正确的代码："><a href="#虚伪的正确的代码：" class="headerlink" title="虚伪的正确的代码："></a>虚伪的正确的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;container/list&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">list1 *list.List</span><br><span class="line">list2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack &#123;</span><br><span class="line">list1: list.New(),</span><br><span class="line">list2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">this.list1.PushBack(x)</span><br><span class="line">temp := x</span><br><span class="line">this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果stack为空返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front()</span><br><span class="line">this.list2.Remove(temp)</span><br><span class="line">return temp.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果栈为空则返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front().Value(int)</span><br><span class="line">return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.list2.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Your MyStack object will be instantiated and called as such:</span><br><span class="line">* obj := Constructor();</span><br><span class="line">* obj.Push(x);</span><br><span class="line">* param_2 := obj.Pop();</span><br><span class="line">* param_3 := obj.Top();</span><br><span class="line">* param_4 := obj.Empty();</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>使用go语言内置的list包 也就是双向链表的操作<br>运用到了go语言的断言 <code>this.list2.Front().Value.(int)</code></p><p>但是 虽然通过了 但是思路应该是错了哈哈哈哈 ！ 这段代码并没有用到队列的性质而是双链表。。。。并没有遵守题目的规则<br>代码问题：</p><p>而只是使用了两个链表，其中 list2 实际上扮演了“栈”的角色。这样的话，list2 单独一个链表就能实现后进先出，不需要 list1 的辅助。</p><h4 id="真正的正确代码"><a href="#真正的正确代码" class="headerlink" title="真正的正确代码"></a>真正的正确代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;container/list&quot;</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">queue1 *list.List</span><br><span class="line">queue2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack&#123;</span><br><span class="line">queue1: list.New(),</span><br><span class="line">queue2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int) &#123;</span><br><span class="line">this.queue1.PushBack(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(top)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue2.PushBack(top.Value)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.queue1.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="第20题有效括号"><a href="#第20题有效括号" class="headerlink" title="第20题有效括号"></a>第20题有效括号</h3><p>问题：</p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><h4 id="解答过程"><a href="#解答过程" class="headerlink" title="解答过程"></a>解答过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">    // 创建一个栈来存储左括号</span><br><span class="line">    stack := make([]rune, 0)</span><br><span class="line">    // 括号的对应关系</span><br><span class="line">    pairs := map[rune]rune&#123;</span><br><span class="line">        &#x27;)&#x27;: &#x27;(&#x27;,</span><br><span class="line">        &#x27;&#125;&#x27;: &#x27;&#123;&#x27;,</span><br><span class="line">        &#x27;]&#x27;: &#x27;[&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    // 遍历字符串s</span><br><span class="line">    for _, char := range s &#123;</span><br><span class="line">        // 如果是右括号</span><br><span class="line">        if _, exists := pairs[char]; exists &#123;</span><br><span class="line">            // 取出栈顶元素，如果栈为空或者不匹配则返回false</span><br><span class="line">            if len(stack) == 0 || stack[len(stack)-1] != pairs[char] &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            // 否则弹出栈顶元素</span><br><span class="line">            stack = stack[:len(stack)-1]</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果是左括号，压入栈中</span><br><span class="line">            stack = append(stack, char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果栈为空，则所有括号正确匹配</span><br><span class="line">    return len(stack) == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>栈的问题</p><hr><h3 id="字节刷题（队列）相关："><a href="#字节刷题（队列）相关：" class="headerlink" title="字节刷题（队列）相关："></a>字节刷题（队列）相关：</h3><p>问题：</p><p>小R的随机播放顺序<br>问题描述<br>小有一个特殊的随机播放规则。他首先播放歌单中的第一首歌，播放后将其从歌<br>单中移除。如果歌单中还有歌曲，则会将当前第一首歌移到最后一首。这个过程会<br>一直重复，直到歌单中没有任何歌曲。<br>例如，给定歌单[5,3,2,1,4]，真实的播放顺序是[5,2,4,1,3]。<br>保证歌曲中的id两两不同。<br>测试样例<br>样例1：<br>输入：n&#x3D;5,a&#x3D;[5,3,2,1,4]输出：[5,2,4,1,3]<br>样2：<br>输入：n&#x3D;4,a&#x3D;[4,1,3,2]输出：[4,3,1,2]<br>样3：<br>输入：n&#x3D;6,a&#x3D;[1,2,3,4,5,6]输出：[1,3,5,2,6,4]</p><p>看完题之后的思路 ： 就是队列问题 如何操作栈 在文中也就是实现： 先出栈-》再执行出栈入栈-》再出栈 这是目前简单的思路<br>然后搜索Go语言队列的相关操作 用slice实现队列：或者 list实现队列</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func solution(n int, a []int) []int &#123;</span><br><span class="line">    result := []int&#123;&#125;  // 用于存储播放顺序</span><br><span class="line"></span><br><span class="line">    for len(a) &gt; 0 &#123;</span><br><span class="line">        // 播放第一首歌并加入到结果中</span><br><span class="line">        result = append(result, a[0])</span><br><span class="line">        // 移除播放的歌曲</span><br><span class="line">        a = a[1:]</span><br><span class="line">        </span><br><span class="line">        // 如果歌单还有剩余，将当前第一首歌移到最后</span><br><span class="line">        if len(a) &gt; 0 &#123;</span><br><span class="line">            a = append(a[1:], a[0])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(5, []int&#123;5, 3, 2, 1, 4&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;5, 2, 4, 1, 3&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(4, []int&#123;4, 1, 3, 2&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;4, 3, 1, 2&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(6, []int&#123;1, 2, 3, 4, 5, 6&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;1, 3, 5, 2, 6, 4&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到题解我蒙了：我在思考的时候确实想如何实现这个队列并且如何实现添加元素并且删除元素  </p><p>但是 在这道题中，Go 切片的特性其实已经很好地帮你实现了这些操作。切片的 append 和切片操作符 a[1:] 直接完成了队列的“入队”和“出队”需求。只是在简化的问题上，利用 Go 自带的切片操作让解决方案更简洁、易懂。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节课程学习总结</title>
      <link href="/2024/11/08/Dance_Byte/"/>
      <url>/2024/11/08/Dance_Byte/</url>
      
        <content type="html"><![CDATA[<h1 id="字节内部课程学习"><a href="#字节内部课程学习" class="headerlink" title="字节内部课程学习"></a>字节内部课程学习</h1><h3 id="一-走进RPC框架"><a href="#一-走进RPC框架" class="headerlink" title="一.走进RPC框架"></a>一.走进RPC框架</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>本地函数调用 压栈弹出</p><p>RPC调用  网上购物 {（付款操作）</p><p>远程调用 中间隔着网路  不能用函数指针了 是两个进程 机器id找到函数运行</p><p>解决问题 1. 函数映射</p><ol start="2"><li>数据转换成字节流 （客户端转换成字节流 传送给 服务端）</li><li>网络传输（高效稳定传输数据）</li></ol><p>}</p><p><img src="/study_photo/1.png" alt="示例图片"></p><p><strong>过程</strong>：User本地调用 打包参数 -》 RPC -》 对端-》解压-》调用真正业务逻辑 然后在返回 整个流程</p><p>IDL文件（接口描述文件）</p><p><img src="/study_photo/2.png" alt="image-20241107104049573"></p><p>Caller（调用段）和 生成代码 -》 encoder编码 -》字节流 -》打包传送给对端</p><p><strong>好处</strong></p><p><img src="/study_photo/3.png" alt="image-20241107104333574"></p><p><img src="/study_photo/4.png" alt="image-20241107111602308"></p><p><img src="/study_photo/5.png" alt="image-20241107111758336"></p><h4 id="2-编解码层："><a href="#2-编解码层：" class="headerlink" title="2.编解码层："></a>2.编解码层：</h4><p><img src="/study_photo/6.png" alt="image-20241107111909320"></p><p>编解码层：</p><p><img src="/study_photo/7.png" alt="image-20241107111950413"></p><p>二进制编码</p><p><img src="/study_photo/8.png" alt="image-20241107112146078"></p><p>左侧是IDL中写的统一的 -》字节流 有额外的内存开销</p><p><img src="/study_photo/10.png" alt="image-20241107112827203"></p><p><img src="/study_photo/11.png" alt="image-20241107112953295"></p><p><strong>多路复用</strong>：同一个链接内 可以有多个请求流通过</p><p>协议解析：</p><p><img src="/study_photo/12.png" alt="image-20241107113245207"></p><h4 id="4-网络通信层："><a href="#4-网络通信层：" class="headerlink" title="4.网络通信层："></a>4.网络通信层：</h4><p><img src="/study_photo/13.png" alt="image-20241107113347859"></p><p>SCOEKT API   （ip+端口）</p><p>一端关闭套接字    如果另一端如果尝试去读 可能就会返回（End Of File）也就是 EOF 在项目中我好像遇到过这个问题 用postman测试的时候返回了EOF错误和nil</p><p>网络库</p><p><img src="/study_photo/14.png" alt="image-20241107113810046"></p><h3 id="二-RPC关键指标分析与企业实践"><a href="#二-RPC关键指标分析与企业实践" class="headerlink" title="二.RPC关键指标分析与企业实践"></a>二.RPC关键指标分析与企业实践</h3><p>稳定性 易用性 扩展性 观测性 高性能</p><p>稳定性：</p><p><img src="/study_photo/15.png" alt="image-20241107114134948"></p><p><strong>过程：</strong>a调用b b调用c c如果响应慢 b就会一直等待 a也就超时了 a就会频繁调用b b堆积大量请求就会宕机</p><p>熔断起保护作用</p><p>稳定性：请求成功了率</p><p><img src="/study_photo/16.png" alt="image-20241107114404973"></p><p>1.均匀调用服务的每个节点</p><ol start="2"><li>重试几次</li></ol><p><img src="/study_photo/17.png" alt="image-20241107114611581"></p><p>备份请求： 左侧正常 1失败  2是重试请求  总时间 t1＋t2</p><p>​                    右侧 t3 tct99（这个值 在这个时间内应该可以返回值）如果在时间内没返回 就发送2请求 总时间就是 t4</p><h4 id="1-注册中间件"><a href="#1-注册中间件" class="headerlink" title="1.注册中间件"></a>1.注册中间件</h4><p><img src="/study_photo/18.png" alt="image-20241107114931005"></p><h4 id="2-易用性："><a href="#2-易用性：" class="headerlink" title="2.易用性："></a>2.易用性：</h4><p><img src="/study_photo/19.png" alt="image-20241107115019715"></p><p>自动生成代码工具 ： 减少重复性工作</p><h4 id="3-扩展性"><a href="#3-扩展性" class="headerlink" title="3.扩展性"></a>3.扩展性</h4><p><img src="/study_photo/20.png" alt="image-20241107115236618"></p><p>用户请求 经过中间件处理-》和远端交互 -》 也通过中间件处理-》服务器</p><h4 id="4-观测性："><a href="#4-观测性：" class="headerlink" title="4.观测性："></a>4.观测性：</h4><p><img src="/study_photo/21.png" alt="image-20241107115409542"></p><p>日志观察 监控面板qbs 链路跟踪（服务通过请求为什么超时了 耗费的时间是多少）</p><p>linux的top工具类似原理</p><h4 id="5-高性能："><a href="#5-高性能：" class="headerlink" title="5.高性能："></a>5.高性能：</h4><p><img src="/study_photo/22.png" alt="image-20241107115628087"></p><p>高吞吐：在单位时间内尽可能多的处理更多请求</p><p>低延迟： 一次请求发出去延迟尽可能地低（重要）</p><p>​</p><h4 id="6-本章总结："><a href="#6-本章总结：" class="headerlink" title="6.  本章总结："></a>6.  本章总结：</h4><p><img src="/study_photo/23.png" alt="image-20241107115938337"></p><p>字节实践：</p><p><img src="/study_photo/24.png" alt="image-20241107120230033"></p><p>组件 结构 远端交互层 网络库  代码生成工具 （最左侧）</p><p>为什么自研网络库？</p><p>gonet</p><p><img src="/study_photo/25.png" alt="image-20241107120515080"></p><p>Netpoll</p><p><img src="/study_photo/26.png" alt="image-20241107120603540"></p><p><img src="/study_photo/27.png" alt="image-20241107120656906"></p><p>交互方式pingpang（一发一回） 编解码 应用层协议</p><p>优化：</p><p><img src="/study_photo/28.png" alt="image-20241107120826363"></p><p><img src="/study_photo/29.png" alt="image-20241107120948515"></p><p>你应该想这些是怎么实现的？</p><p><img src="/study_photo/30.png" alt="image-20241107121448901"></p><p><img src="/study_photo/31.png" alt="image-20241107121741751"></p><h3 id="三-走进HTTP协议"><a href="#三-走进HTTP协议" class="headerlink" title="三.走进HTTP协议"></a>三.走进HTTP协议</h3><h4 id="1-再谈http协议"><a href="#1-再谈http协议" class="headerlink" title="1.再谈http协议"></a>1.再谈http协议</h4><p>HTTP 超文本传输协议</p><p><img src="/study_photo/32.png" alt="image-20241108133154991"></p><p>http协议将人话以计算机语言传输过去</p><p><img src="/study_photo/33.png" alt="image-20241108133257828"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求行</span><br><span class="line">：分隔 原数据</span><br><span class="line"></span><br><span class="line">包的字节数</span><br><span class="line">大空行</span><br><span class="line"></span><br><span class="line">我们想说的话</span><br><span class="line"></span><br><span class="line">下面是回复</span><br></pre></td></tr></table></figure><p><img src="/study_photo/34.png" alt="image-20241108133725032"></p><p><img src="/study_photo/35.png" alt="image-20241108133847415"></p><p>上述功能代码：</p><p><img src="/study_photo/36.png" alt="image-20241108134149368"></p><p>处理流程:</p><p><img src="/study_photo/37.png" alt="image-20241108134229285"></p><p>H1的不足 H2也没完全解决    UDP解决对头阻塞</p><p><img src="/study_photo/38.png" alt="image-20241108134628306"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美化博客</title>
      <link href="/2024/11/08/lasting_beauty/"/>
      <url>/2024/11/08/lasting_beauty/</url>
      
        <content type="html"><![CDATA[<p>使博客看起来更加美观，持续更新中！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>发布博客出现的问题</title>
      <link href="/2024/11/06/github_actions/"/>
      <url>/2024/11/06/github_actions/</url>
      
        <content type="html"><![CDATA[<p>每一次用push推送到githubpage都会出现构建部署错误 我问了一下ai原因 这才有点明白到底是为什么</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>为什么会有这种差异？<br>GitHub Pages 和 本地环境的差异：</p><p>在本地执行 hexo d 时，你的本地环境会根据 package.json 中的依赖来安装所有的主题和插件，确保所有必要的资源都存在。<br>但是 GitHub Pages 仅仅依赖仓库中已经推送的文件（通常是 public&#x2F; 文件夹和 ._config.yml），它不会自动运行 npm、yarn 或 pnpm 来安装依赖。换句话说，GitHub Pages 并不会在部署过程中安装缺少的主题或插件。<br>依赖没有正确推送：</p><p>你在本地运行 hexo d 时，可能已经正确地安装了 butterfly 主题，并且该主题存在于本地的 _config.yml 中和 node_modules 文件夹中。<br>然而，在推送到 GitHub 上时，你没有将 node_modules 中的 butterfly 主题或相关配置文件推送到 GitHub 仓库。GitHub Pages 需要能够访问这些主题文件，而它不会在部署过程中下载和安装这些依赖。<br>GitHub Pages 配置问题：</p><p>如果你直接使用 GitHub Pages 作为部署平台，GitHub 并不会自动安装你的 Hexo 依赖，因此它不能像本地环境一样找到 butterfly 主题。<br>GitHub Pages 需要使用一个可以通过静态文件夹来部署的版本，而 Hexo 本地运行时通常会将主题内容放在 node_modules 中，这些内容并不会自动推送到 GitHub，除非你特别将它们包含在仓库中。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用github-actions<br>并且在google查找到的方法添加 .nojekyll文件 让github站点不适用jekyll</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main  # 监听主分支的推送</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout repository</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Setup Node.js</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;16&#x27;</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Generate and Deploy</span><br><span class="line">        run: |</span><br><span class="line">          hexo generate</span><br><span class="line">          hexo deploy</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PATH: $&#123;&#123; secrets.HEXO_DEPLOY_PATH &#125;&#125;  # 设置部署路径</span><br></pre></td></tr></table></figure><p>多看源码 基础真的很重要 多看官方文档能解决很多问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github参与开源应该做什么</title>
      <link href="/2024/11/05/github/"/>
      <url>/2024/11/05/github/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次参与开源项目应该做些什么"><a href="#第一次参与开源项目应该做些什么" class="headerlink" title="第一次参与开源项目应该做些什么"></a>第一次参与开源项目应该做些什么</h1><p>借鉴Moment老哥文档</p><p><a href="https://juejin.cn/post/7354233858063925267">https://juejin.cn/post/7354233858063925267</a></p><h4 id="第一步fork"><a href="#第一步fork" class="headerlink" title="第一步fork"></a>第一步fork</h4><p>fork到自己的仓库下 且选择fork所有分支 这样就可以有修改项目的权限<br>通过Pull Request方式 commits合到上游项目</p><h4 id="第二步克隆项目"><a href="#第二步克隆项目" class="headerlink" title="第二步克隆项目"></a>第二步克隆项目</h4><p>git clone …</p><h4 id="第三步更新本地分支代码"><a href="#第三步更新本地分支代码" class="headerlink" title="第三步更新本地分支代码"></a>第三步更新本地分支代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;原始仓库的URL&gt;</span><br><span class="line">git fetch upstream</span><br><span class="line">git checkout main</span><br><span class="line">git rebase upstream/main</span><br></pre></td></tr></table></figure><p>等等指令在此省略 详细的等到具体运用中再做增加</p><p>创建新的分支并在新的分支上作出修改 回到fork的仓库中找到pullRequest<br>NewRequest并把自己更改的分支上传到作者的仓库也就完成了一次Request</p><h4 id="写入你想更改的地方"><a href="#写入你想更改的地方" class="headerlink" title="写入你想更改的地方"></a>写入你想更改的地方</h4><p>提交你的更改 </p><h4 id="开一个PR"><a href="#开一个PR" class="headerlink" title="开一个PR"></a>开一个PR</h4><p>在完成 push 操作后，我们打开 GitHub，可以看到一个黄色的提示框，告诉我们可以开一个 Pull Request 了</p><p>参考：</p><p><a href="https://link.juejin.cn/?target=https://github.com/xun082/create-neat/pull/83">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fxun082%2Fcreate-neat%2Fpull%2F83</a><br>一定要参与一次实践，才懂得如何去做。只有错过了，才能保证下一次的完美运行。</p><hr><p>最后希望自己早入加入开源大家庭中，加油！ </p><ul><li><pre><code>                     2024 11.5日</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用总结</title>
      <link href="/2024/11/04/git/"/>
      <url>/2024/11/04/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>1.git clone &#x2F;&#x2F; 到本地<br>2.git checkout -b xxx 切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff 查看自己对代码做出的改变<br>5.git add 上传更新后的代码至暂存区<br>6.git commit 可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx 将本地的xxxgit分支上传至github上的git</p><hr><p>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main 切换回main分支<br>2.git pull origin master(main) 将远端修改过的代码再更新到本地<br>3.git checkout xxx 回到xxx分支<br>4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit</p><hr><p>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin master 再把远端的最新代码拉至本地</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>北京之旅</title>
      <link href="/2024/11/04/hello-world/"/>
      <url>/2024/11/04/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="开源社"><a href="#开源社" class="headerlink" title="开源社"></a>开源社</h2><p>在偶然一次发现中 开源社举办了第九届中国开源年会，我很是激动，心中迅速萌发了去北京参加的冲动并和小伙伴赵冰<br>决定这周五来一次说走就走的旅行~~~</p><h2 id="到达北京"><a href="#到达北京" class="headerlink" title="到达北京"></a>到达北京</h2><p>在周六的早上到达会场 扫了入场的码 领到了活动给的一些礼品 7点多我俩就到达了会场，刚开始觉得平平无奇，后来直到大会开始，陆陆续续的大家都来到了会场，开源社的<br>老哥，老姐们开始了自己的演讲，我发现这真的不是一个普通大会，很多人报着开源的理念 一直维持着开源社，让开源社越来越大<br>虽然是第一次参加，但是我对于这种氛围是非常的喜欢，各位有着自己想法的人都在开源社散发光辉，有为抗癌人士专门发布app的<br>小胰宝等其他的产品，这令我深受触动，把科技真真正正的融合到了生活当中，使人们都能享受科技带来的便捷！大会中的每一个人的演讲都令我感到激动！但是对我印象的最深刻的就是<strong>yihong0618</strong>这个id，伊洪老师的演讲令我眼前一亮心里一跳哈哈哈哈<br>简直太爽啦！！！</p><h2 id="yihong0618"><a href="#yihong0618" class="headerlink" title="yihong0618"></a>yihong0618</h2><p>请大家自己去看伊洪老师的github，你真的能从中学到很多，在火车上我一直再看伊洪老师的github<br>每一件事是写的那么的真诚，有很多我也感同身受，生活的迷茫原来真的不是自己才有，面临各种压力，各种抉择！做好自己。<br>老师的仓库里也有非常多的实用的产品大家可以自己去看！！</p><p>[github] <a href="https://github.com/yihong0618">https://github.com/yihong0618</a></p><p>在伊洪老师的演讲中，令我觉得钦佩的是，每一天的记录自己，我太喜欢这种感觉了，发布到github上，我也便想向这么做<br>在4日赶回来我便从网上学习搭建博客，坚持记录每一天</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次旅程，说走就走，哈哈哈，这才是大学生嘛，遇见了开源社的大家，我希望从今的每一天，慢慢的融入到开源社这个大家庭</p><p>-感谢冰哥陪我这次旅行</p><pre><code>                                                                    2024年11.4日</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>音乐</title>
      <link href="/Music/index.html"/>
      <url>/Music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图库</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/Gallery/beijing.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">北京</div>  <p>车站</p>  <a href='/Gallery/beijing.jpg'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/Gallery/beijing2.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">北京</div>  <p>风景</p>  <a href='/Gallery/beijing2.jpg'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/Gallery/beijing3.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">北京</div>  <p>中关村</p>  <a href='/Gallery/beijing3.jpg'></a>  </figcaption>  </figure>  </div><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-items">[{"url":"/Gallery/beijing4.jpg","alt":""},{"url":"/Gallery/beijing5.jpg","alt":""},{"url":"/Gallery/beijing6.jpg","alt":""},{"url":"/Gallery/beijing7.jpg","alt":""},{"url":"/Gallery/beijing8.jpg","alt":""},{"url":"/Gallery/beijing9.jpg","alt":""},{"url":"/Gallery/beijing11.jpg","alt":""},{"url":"/Gallery/beijing12.jpg","alt":""}]</div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
